// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_listener.proto

#include "client_listener.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_client_5flistener_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InvitationToPlayGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InvitationToViewGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyboardKey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListenerToClientsWebRTCRefuse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OneChargeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayGameRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RTCAdmin2ClientOffer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RTCClient2AdminAnswer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RTCGameAdminRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RTCGameClientRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponceOnGameInvitation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponceOnGameView;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoomInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetLightVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetMagneticCalculated;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetQulon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShowStruct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ViewGameRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WebRTCGameInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_rtcGameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ListenerToClientGamesStates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ListenerToClientsWebRTCGamesStates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoomToClient;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_client_5flistener_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SceneGeometry;
}  // namespace protobuf_client_5flistener_2eproto
class RoomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomInfo>
      _instance;
} _RoomInfo_default_instance_;
class ResponceOnGameInvitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponceOnGameInvitation>
      _instance;
} _ResponceOnGameInvitation_default_instance_;
class ResponceOnGameViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponceOnGameView>
      _instance;
} _ResponceOnGameView_default_instance_;
class StartGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartGame>
      _instance;
} _StartGame_default_instance_;
class OneChargeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OneChargeInfo>
      _instance;
} _OneChargeInfo_default_instance_;
class ShowStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShowStruct>
      _instance;
} _ShowStruct_default_instance_;
class SceneGeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SceneGeometry>
      _instance;
} _SceneGeometry_default_instance_;
class RTCGameClientRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTCGameClientRequest>
      _instance;
} _RTCGameClientRequest_default_instance_;
class RTCGameAdminRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTCGameAdminRequest>
      _instance;
} _RTCGameAdminRequest_default_instance_;
class PlayGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayGameRequest>
      _instance;
} _PlayGameRequest_default_instance_;
class ViewGameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ViewGameRequest>
      _instance;
} _ViewGameRequest_default_instance_;
class RTCAdmin2ClientOfferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTCAdmin2ClientOffer>
      _instance;
} _RTCAdmin2ClientOffer_default_instance_;
class RTCClient2AdminAnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTCClient2AdminAnswer>
      _instance;
} _RTCClient2AdminAnswer_default_instance_;
class ClientQueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientQueryRequest>
      _instance;
  const ::PlayGameRequest* playrequest_;
  const ::ViewGameRequest* viewrequest_;
  const ::RTCGameAdminRequest* rtcadminrequest_;
  const ::RTCGameClientRequest* rtcclientrequest_;
  const ::RTCAdmin2ClientOffer* rtcoffer_;
  const ::RTCClient2AdminAnswer* rtcanswer_;
} _ClientQueryRequest_default_instance_;
class RoomToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomToClient>
      _instance;
} _RoomToClient_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo>
      _instance;
} _GameInfo_default_instance_;
class RoomWrappedToClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomWrappedToClientMessage>
      _instance;
  const ::RoomToClient* roomtoclient_;
  const ::GameInfo* gameinfo_;
} _RoomWrappedToClientMessage_default_instance_;
class WebRTCGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WebRTCGameInfo>
      _instance;
} _WebRTCGameInfo_default_instance_;
class WebRTCAdminToClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WebRTCAdminToClientMessage>
      _instance;
  const ::WebRTCGameInfo* rtcgameinfo_;
} _WebRTCAdminToClientMessage_default_instance_;
class RoomWrappedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomWrappedMessage>
      _instance;
  const ::RoomInfo* roominfo_;
  const ::ResponceOnGameInvitation* responceinvitation_;
  const ::ResponceOnGameView* responceview_;
  const ::StartGame* startgame_;
} _RoomWrappedMessage_default_instance_;
class InvitationToPlayGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InvitationToPlayGame>
      _instance;
} _InvitationToPlayGame_default_instance_;
class InvitationToViewGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InvitationToViewGame>
      _instance;
} _InvitationToViewGame_default_instance_;
class ListenerToClientGamesStatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenerToClientGamesStates>
      _instance;
} _ListenerToClientGamesStates_default_instance_;
class rtcGameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rtcGameState>
      _instance;
} _rtcGameState_default_instance_;
class ListenerToClientsWebRTCGamesStatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenerToClientsWebRTCGamesStates>
      _instance;
} _ListenerToClientsWebRTCGamesStates_default_instance_;
class ListenerToClientsWebRTCRefuseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenerToClientsWebRTCRefuse>
      _instance;
} _ListenerToClientsWebRTCRefuse_default_instance_;
class ListenerToClientWrappedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenerToClientWrappedMessage>
      _instance;
  const ::InvitationToPlayGame* invitationtoplay_;
  const ::ListenerToClientGamesStates* states_;
  const ::InvitationToViewGame* invitationtoview_;
  const ::ListenerToClientsWebRTCGamesStates* rtcstates_;
  const ::ListenerToClientsWebRTCRefuse* rtcrefuse_;
  const ::RTCAdmin2ClientOffer* rtcoffer_;
  const ::RTCClient2AdminAnswer* rtcanswer_;
} _ListenerToClientWrappedMessage_default_instance_;
class ServerWrappedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerWrappedMessage>
      _instance;
  const ::InvitationToPlayGame* invitationtoplay_;
  const ::InvitationToViewGame* invitationtoview_;
} _ServerWrappedMessage_default_instance_;
class KeyboardKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyboardKey>
      _instance;
} _KeyboardKey_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ping>
      _instance;
} _Ping_default_instance_;
class SetQulonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetQulon>
      _instance;
} _SetQulon_default_instance_;
class SetLightVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetLightVelocity>
      _instance;
} _SetLightVelocity_default_instance_;
class SetMagneticCalculatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetMagneticCalculated>
      _instance;
} _SetMagneticCalculated_default_instance_;
class ClientWrappedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientWrappedMessage>
      _instance;
  const ::KeyboardKey* key_;
  const ::Ping* ping_;
  const ::SetQulon* qulon_;
  const ::SetLightVelocity* lightvelocity_;
  const ::SetMagneticCalculated* magneticcalculated_;
} _ClientWrappedMessage_default_instance_;
namespace protobuf_client_5flistener_2eproto {
static void InitDefaultsRoomInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomInfo_default_instance_;
    new (ptr) ::RoomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomInfo}, {}};

static void InitDefaultsResponceOnGameInvitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResponceOnGameInvitation_default_instance_;
    new (ptr) ::ResponceOnGameInvitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResponceOnGameInvitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponceOnGameInvitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponceOnGameInvitation}, {}};

static void InitDefaultsResponceOnGameView() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResponceOnGameView_default_instance_;
    new (ptr) ::ResponceOnGameView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResponceOnGameView::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponceOnGameView =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponceOnGameView}, {}};

static void InitDefaultsStartGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartGame_default_instance_;
    new (ptr) ::StartGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartGame}, {}};

static void InitDefaultsOneChargeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OneChargeInfo_default_instance_;
    new (ptr) ::OneChargeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OneChargeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OneChargeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOneChargeInfo}, {}};

static void InitDefaultsShowStruct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShowStruct_default_instance_;
    new (ptr) ::ShowStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShowStruct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShowStruct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShowStruct}, {}};

static void InitDefaultsSceneGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SceneGeometry_default_instance_;
    new (ptr) ::SceneGeometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SceneGeometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SceneGeometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSceneGeometry}, {
      &protobuf_client_5flistener_2eproto::scc_info_ShowStruct.base,}};

static void InitDefaultsRTCGameClientRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTCGameClientRequest_default_instance_;
    new (ptr) ::RTCGameClientRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTCGameClientRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RTCGameClientRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRTCGameClientRequest}, {}};

static void InitDefaultsRTCGameAdminRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTCGameAdminRequest_default_instance_;
    new (ptr) ::RTCGameAdminRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTCGameAdminRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RTCGameAdminRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRTCGameAdminRequest}, {}};

static void InitDefaultsPlayGameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayGameRequest_default_instance_;
    new (ptr) ::PlayGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayGameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayGameRequest}, {}};

static void InitDefaultsViewGameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ViewGameRequest_default_instance_;
    new (ptr) ::ViewGameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ViewGameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ViewGameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsViewGameRequest}, {}};

static void InitDefaultsRTCAdmin2ClientOffer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTCAdmin2ClientOffer_default_instance_;
    new (ptr) ::RTCAdmin2ClientOffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTCAdmin2ClientOffer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RTCAdmin2ClientOffer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRTCAdmin2ClientOffer}, {}};

static void InitDefaultsRTCClient2AdminAnswer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTCClient2AdminAnswer_default_instance_;
    new (ptr) ::RTCClient2AdminAnswer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTCClient2AdminAnswer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RTCClient2AdminAnswer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRTCClient2AdminAnswer}, {}};

static void InitDefaultsClientQueryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientQueryRequest_default_instance_;
    new (ptr) ::ClientQueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientQueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ClientQueryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsClientQueryRequest}, {
      &protobuf_client_5flistener_2eproto::scc_info_PlayGameRequest.base,
      &protobuf_client_5flistener_2eproto::scc_info_ViewGameRequest.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCGameAdminRequest.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCGameClientRequest.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCAdmin2ClientOffer.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCClient2AdminAnswer.base,}};

static void InitDefaultsRoomToClient() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomToClient_default_instance_;
    new (ptr) ::RoomToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoomToClient =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoomToClient}, {
      &protobuf_client_5flistener_2eproto::scc_info_OneChargeInfo.base,}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameState_default_instance_;
    new (ptr) ::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameState}, {
      &protobuf_client_5flistener_2eproto::scc_info_RoomInfo.base,}};

static void InitDefaultsGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameInfo_default_instance_;
    new (ptr) ::GameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameInfo}, {
      &protobuf_client_5flistener_2eproto::scc_info_SceneGeometry.base,}};

static void InitDefaultsRoomWrappedToClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomWrappedToClientMessage_default_instance_;
    new (ptr) ::RoomWrappedToClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomWrappedToClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RoomWrappedToClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoomWrappedToClientMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_RoomToClient.base,
      &protobuf_client_5flistener_2eproto::scc_info_GameInfo.base,}};

static void InitDefaultsWebRTCGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WebRTCGameInfo_default_instance_;
    new (ptr) ::WebRTCGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WebRTCGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WebRTCGameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWebRTCGameInfo}, {}};

static void InitDefaultsWebRTCAdminToClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WebRTCAdminToClientMessage_default_instance_;
    new (ptr) ::WebRTCAdminToClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WebRTCAdminToClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WebRTCAdminToClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWebRTCAdminToClientMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_WebRTCGameInfo.base,}};

static void InitDefaultsRoomWrappedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomWrappedMessage_default_instance_;
    new (ptr) ::RoomWrappedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomWrappedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RoomWrappedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRoomWrappedMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_RoomInfo.base,
      &protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameInvitation.base,
      &protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameView.base,
      &protobuf_client_5flistener_2eproto::scc_info_StartGame.base,}};

static void InitDefaultsInvitationToPlayGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InvitationToPlayGame_default_instance_;
    new (ptr) ::InvitationToPlayGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InvitationToPlayGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InvitationToPlayGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInvitationToPlayGame}, {}};

static void InitDefaultsInvitationToViewGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InvitationToViewGame_default_instance_;
    new (ptr) ::InvitationToViewGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InvitationToViewGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InvitationToViewGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInvitationToViewGame}, {}};

static void InitDefaultsListenerToClientGamesStates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ListenerToClientGamesStates_default_instance_;
    new (ptr) ::ListenerToClientGamesStates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ListenerToClientGamesStates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListenerToClientGamesStates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListenerToClientGamesStates}, {
      &protobuf_client_5flistener_2eproto::scc_info_GameState.base,}};

static void InitDefaultsrtcGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rtcGameState_default_instance_;
    new (ptr) ::rtcGameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rtcGameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rtcGameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrtcGameState}, {}};

static void InitDefaultsListenerToClientsWebRTCGamesStates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ListenerToClientsWebRTCGamesStates_default_instance_;
    new (ptr) ::ListenerToClientsWebRTCGamesStates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ListenerToClientsWebRTCGamesStates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListenerToClientsWebRTCGamesStates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListenerToClientsWebRTCGamesStates}, {
      &protobuf_client_5flistener_2eproto::scc_info_rtcGameState.base,}};

static void InitDefaultsListenerToClientsWebRTCRefuse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ListenerToClientsWebRTCRefuse_default_instance_;
    new (ptr) ::ListenerToClientsWebRTCRefuse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ListenerToClientsWebRTCRefuse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListenerToClientsWebRTCRefuse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListenerToClientsWebRTCRefuse}, {}};

static void InitDefaultsListenerToClientWrappedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ListenerToClientWrappedMessage_default_instance_;
    new (ptr) ::ListenerToClientWrappedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ListenerToClientWrappedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_ListenerToClientWrappedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsListenerToClientWrappedMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToPlayGame.base,
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientGamesStates.base,
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToViewGame.base,
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCGamesStates.base,
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCRefuse.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCAdmin2ClientOffer.base,
      &protobuf_client_5flistener_2eproto::scc_info_RTCClient2AdminAnswer.base,}};

static void InitDefaultsServerWrappedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerWrappedMessage_default_instance_;
    new (ptr) ::ServerWrappedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerWrappedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ServerWrappedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsServerWrappedMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToPlayGame.base,
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToViewGame.base,}};

static void InitDefaultsKeyboardKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KeyboardKey_default_instance_;
    new (ptr) ::KeyboardKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KeyboardKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyboardKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyboardKey}, {}};

static void InitDefaultsPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ping_default_instance_;
    new (ptr) ::Ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPing}, {}};

static void InitDefaultsSetQulon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetQulon_default_instance_;
    new (ptr) ::SetQulon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetQulon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetQulon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetQulon}, {}};

static void InitDefaultsSetLightVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetLightVelocity_default_instance_;
    new (ptr) ::SetLightVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetLightVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetLightVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetLightVelocity}, {}};

static void InitDefaultsSetMagneticCalculated() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetMagneticCalculated_default_instance_;
    new (ptr) ::SetMagneticCalculated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetMagneticCalculated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetMagneticCalculated =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetMagneticCalculated}, {}};

static void InitDefaultsClientWrappedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientWrappedMessage_default_instance_;
    new (ptr) ::ClientWrappedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientWrappedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ClientWrappedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsClientWrappedMessage}, {
      &protobuf_client_5flistener_2eproto::scc_info_KeyboardKey.base,
      &protobuf_client_5flistener_2eproto::scc_info_Ping.base,
      &protobuf_client_5flistener_2eproto::scc_info_SetQulon.base,
      &protobuf_client_5flistener_2eproto::scc_info_SetLightVelocity.base,
      &protobuf_client_5flistener_2eproto::scc_info_SetMagneticCalculated.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RoomInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponceOnGameInvitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponceOnGameView.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OneChargeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShowStruct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SceneGeometry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RTCGameClientRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RTCGameAdminRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayGameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ViewGameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RTCAdmin2ClientOffer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RTCClient2AdminAnswer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientQueryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomToClient.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomWrappedToClientMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WebRTCGameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WebRTCAdminToClientMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomWrappedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InvitationToPlayGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InvitationToViewGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenerToClientGamesStates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rtcGameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenerToClientsWebRTCGamesStates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenerToClientsWebRTCRefuse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenerToClientWrappedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerWrappedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyboardKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetQulon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetLightVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetMagneticCalculated.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientWrappedMessage.base);
}

::google::protobuf::Metadata file_level_metadata[35];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomInfo, roomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomInfo, gamestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomInfo, roomsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomInfo, waitingsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameInvitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameInvitation, responce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameInvitation, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameInvitation, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameInvitation, clientport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameView, responce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameView, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameView, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponceOnGameView, clientport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StartGame, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, fex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, fey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, fbx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneChargeInfo, fby_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShowStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShowStruct, palettetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShowStruct, palettename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, qulon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, lightvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, ifmagnetic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, forcesshowstruct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SceneGeometry, eqpotentialsshowstruct_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCGameClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCGameClientRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCGameAdminRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCGameAdminRequest, gamename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCGameAdminRequest, roomsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayGameRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlayGameRequest, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ViewGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ViewGameRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ViewGameRequest, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCAdmin2ClientOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCAdmin2ClientOffer, gamertcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCAdmin2ClientOffer, offer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCClient2AdminAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCClient2AdminAnswer, gamertcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RTCClient2AdminAnswer, answer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientQueryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ClientQueryRequestDefaultTypeInternal, playrequest_),
  offsetof(::ClientQueryRequestDefaultTypeInternal, viewrequest_),
  offsetof(::ClientQueryRequestDefaultTypeInternal, rtcadminrequest_),
  offsetof(::ClientQueryRequestDefaultTypeInternal, rtcclientrequest_),
  offsetof(::ClientQueryRequestDefaultTypeInternal, rtcoffer_),
  offsetof(::ClientQueryRequestDefaultTypeInternal, rtcanswer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientQueryRequest, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomToClient, packetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomToClient, chargeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, roomport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, roominfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameInfo, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameInfo, currentchargeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedToClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedToClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::RoomWrappedToClientMessageDefaultTypeInternal, roomtoclient_),
  offsetof(::RoomWrappedToClientMessageDefaultTypeInternal, gameinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedToClientMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCGameInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCGameInfo, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCGameInfo, forcepalette_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCGameInfo, eqpotpalette_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCAdminToClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCAdminToClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::WebRTCAdminToClientMessageDefaultTypeInternal, rtcgameinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WebRTCAdminToClientMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::RoomWrappedMessageDefaultTypeInternal, roominfo_),
  offsetof(::RoomWrappedMessageDefaultTypeInternal, responceinvitation_),
  offsetof(::RoomWrappedMessageDefaultTypeInternal, responceview_),
  offsetof(::RoomWrappedMessageDefaultTypeInternal, startgame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RoomWrappedMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToPlayGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToPlayGame, clientport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToPlayGame, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToPlayGame, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToViewGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToViewGame, clientport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToViewGame, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InvitationToViewGame, ticket_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientGamesStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientGamesStates, gamestate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, gamertcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, gamename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, roomsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, currentplayerscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rtcGameState, playerstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientsWebRTCGamesStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientsWebRTCGamesStates, rtcstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientsWebRTCRefuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientsWebRTCRefuse, gamertcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientsWebRTCRefuse, refusereason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientWrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientWrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, invitationtoplay_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, states_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, invitationtoview_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, rtcstates_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, rtcrefuse_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, rtcoffer_),
  offsetof(::ListenerToClientWrappedMessageDefaultTypeInternal, rtcanswer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ListenerToClientWrappedMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerWrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerWrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServerWrappedMessageDefaultTypeInternal, invitationtoplay_),
  offsetof(::ServerWrappedMessageDefaultTypeInternal, invitationtoview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerWrappedMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KeyboardKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KeyboardKey, keyboardkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ping, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetQulon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetQulon, qulon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetLightVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetLightVelocity, lightvelocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetMagneticCalculated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SetMagneticCalculated, magneticcalculated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientWrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientWrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ClientWrappedMessageDefaultTypeInternal, key_),
  offsetof(::ClientWrappedMessageDefaultTypeInternal, ping_),
  offsetof(::ClientWrappedMessageDefaultTypeInternal, qulon_),
  offsetof(::ClientWrappedMessageDefaultTypeInternal, lightvelocity_),
  offsetof(::ClientWrappedMessageDefaultTypeInternal, magneticcalculated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientWrappedMessage, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RoomInfo)},
  { 9, -1, sizeof(::ResponceOnGameInvitation)},
  { 18, -1, sizeof(::ResponceOnGameView)},
  { 27, -1, sizeof(::StartGame)},
  { 33, -1, sizeof(::OneChargeInfo)},
  { 50, -1, sizeof(::ShowStruct)},
  { 57, -1, sizeof(::SceneGeometry)},
  { 69, -1, sizeof(::RTCGameClientRequest)},
  { 75, -1, sizeof(::RTCGameAdminRequest)},
  { 82, -1, sizeof(::PlayGameRequest)},
  { 89, -1, sizeof(::ViewGameRequest)},
  { 96, -1, sizeof(::RTCAdmin2ClientOffer)},
  { 103, -1, sizeof(::RTCClient2AdminAnswer)},
  { 110, -1, sizeof(::ClientQueryRequest)},
  { 122, -1, sizeof(::RoomToClient)},
  { 129, -1, sizeof(::GameState)},
  { 136, -1, sizeof(::GameInfo)},
  { 143, -1, sizeof(::RoomWrappedToClientMessage)},
  { 151, -1, sizeof(::WebRTCGameInfo)},
  { 160, -1, sizeof(::WebRTCAdminToClientMessage)},
  { 167, -1, sizeof(::RoomWrappedMessage)},
  { 177, -1, sizeof(::InvitationToPlayGame)},
  { 185, -1, sizeof(::InvitationToViewGame)},
  { 193, -1, sizeof(::ListenerToClientGamesStates)},
  { 199, -1, sizeof(::rtcGameState)},
  { 209, -1, sizeof(::ListenerToClientsWebRTCGamesStates)},
  { 215, -1, sizeof(::ListenerToClientsWebRTCRefuse)},
  { 222, -1, sizeof(::ListenerToClientWrappedMessage)},
  { 235, -1, sizeof(::ServerWrappedMessage)},
  { 243, -1, sizeof(::KeyboardKey)},
  { 249, -1, sizeof(::Ping)},
  { 255, -1, sizeof(::SetQulon)},
  { 261, -1, sizeof(::SetLightVelocity)},
  { 267, -1, sizeof(::SetMagneticCalculated)},
  { 273, -1, sizeof(::ClientWrappedMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ResponceOnGameInvitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ResponceOnGameView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OneChargeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ShowStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SceneGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RTCGameClientRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RTCGameAdminRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlayGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ViewGameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RTCAdmin2ClientOffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RTCClient2AdminAnswer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RoomToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RoomWrappedToClientMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WebRTCGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WebRTCAdminToClientMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RoomWrappedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InvitationToPlayGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InvitationToViewGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ListenerToClientGamesStates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_rtcGameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ListenerToClientsWebRTCGamesStates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ListenerToClientsWebRTCRefuse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ListenerToClientWrappedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ServerWrappedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_KeyboardKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SetQulon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SetLightVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SetMagneticCalculated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientWrappedMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "client_listener.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 35);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025client_listener.proto\"\260\001\n\010RoomInfo\022\020\n\010"
      "roomName\030\001 \001(\t\022,\n\ngameStatus\030\002 \001(\0162\030.Roo"
      "mInfo.GameStatusEnum\022\020\n\010roomSize\030\003 \001(\005\022\023"
      "\n\013waitingSize\030\004 \001(\005\"=\n\016GameStatusEnum\022\013\n"
      "\007gseNone\020\000\022\016\n\ngseWaiting\020\001\022\016\n\ngsePlaying"
      "\020\002\"b\n\030ResponceOnGameInvitation\022\020\n\010respon"
      "ce\030\001 \001(\010\022\016\n\006ticket\030\002 \001(\005\022\020\n\010clientIp\030\003 \001"
      "(\t\022\022\n\nclientPort\030\004 \001(\005\"\\\n\022ResponceOnGame"
      "View\022\020\n\010responce\030\001 \001(\010\022\016\n\006ticket\030\002 \001(\005\022\020"
      "\n\010clientIp\030\003 \001(\t\022\022\n\nclientPort\030\004 \001(\005\"\033\n\t"
      "StartGame\022\016\n\006ticket\030\001 \001(\005\"\360\001\n\rOneChargeI"
      "nfo\022\n\n\002id\030\001 \001(\005\022)\n\004type\030\002 \001(\0162\033.OneCharg"
      "eInfo.Charge2DType\022\t\n\001m\030\003 \001(\002\022\016\n\006charge\030"
      "\004 \001(\002\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002\022\n\n\002vx\030\007 \001(\002\022"
      "\n\n\002vy\030\010 \001(\002\022\013\n\003fex\030\t \001(\002\022\013\n\003fey\030\n \001(\002\022\013\n"
      "\003fbx\030\013 \001(\002\022\013\n\003fby\030\014 \001(\002\"+\n\014Charge2DType\022"
      "\014\n\010ctStatic\020\000\022\r\n\tctDynamic\020\001\"H\n\nShowStru"
      "ct\022%\n\013paletteType\030\001 \001(\0162\020.ShowPaletteTyp"
      "e\022\023\n\013paletteName\030\002 \001(\t\"\274\001\n\rSceneGeometry"
      "\022\r\n\005width\030\001 \001(\002\022\016\n\006height\030\002 \001(\002\022\r\n\005qulon"
      "\030\003 \001(\002\022\025\n\rlightVelocity\030\004 \001(\002\022\022\n\nifMagne"
      "tic\030\005 \001(\010\022%\n\020forcesShowStruct\030\006 \001(\0132\013.Sh"
      "owStruct\022+\n\026eqPotentialsShowStruct\030\007 \001(\013"
      "2\013.ShowStruct\"\"\n\024RTCGameClientRequest\022\n\n"
      "\002id\030\001 \001(\005\"9\n\023RTCGameAdminRequest\022\020\n\010game"
      "Name\030\001 \001(\t\022\020\n\010roomSize\030\002 \001(\005\"+\n\017PlayGame"
      "Request\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"+\n\017Vie"
      "wGameRequest\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"8"
      "\n\024RTCAdmin2ClientOffer\022\021\n\tgameRTCID\030\001 \001("
      "\005\022\r\n\005offer\030\002 \001(\t\":\n\025RTCClient2AdminAnswe"
      "r\022\021\n\tgameRTCID\030\001 \001(\005\022\016\n\006answer\030\002 \001(\t\"\255\002\n"
      "\022ClientQueryRequest\022\'\n\013playRequest\030\001 \001(\013"
      "2\020.PlayGameRequestH\000\022\'\n\013viewRequest\030\002 \001("
      "\0132\020.ViewGameRequestH\000\022/\n\017rtcAdminRequest"
      "\030\003 \001(\0132\024.RTCGameAdminRequestH\000\0221\n\020rtcCli"
      "entRequest\030\004 \001(\0132\025.RTCGameClientRequestH"
      "\000\022)\n\010rtcOffer\030\005 \001(\0132\025.RTCAdmin2ClientOff"
      "erH\000\022+\n\trtcAnswer\030\006 \001(\0132\026.RTCClient2Admi"
      "nAnswerH\000B\t\n\007message\"D\n\014RoomToClient\022\020\n\010"
      "packetId\030\001 \001(\005\022\"\n\nchargeInfo\030\002 \003(\0132\016.One"
      "ChargeInfo\":\n\tGameState\022\020\n\010roomPort\030\001 \001("
      "\005\022\033\n\010roomInfo\030\002 \001(\0132\t.RoomInfo\"E\n\010GameIn"
      "fo\022 \n\010geometry\030\001 \001(\0132\016.SceneGeometry\022\027\n\017"
      "currentChargeId\030\002 \001(\005\"m\n\032RoomWrappedToCl"
      "ientMessage\022%\n\014roomToClient\030\001 \001(\0132\r.Room"
      "ToClientH\000\022\035\n\010gameInfo\030\002 \001(\0132\t.GameInfoH"
      "\000B\t\n\007message\"Y\n\016WebRTCGameInfo\022\013\n\003url\030\001 "
      "\001(\t\022\016\n\006gameid\030\002 \001(\005\022\024\n\014forcePalette\030\003 \001("
      "\t\022\024\n\014eqPotPalette\030\004 \001(\t\"O\n\032WebRTCAdminTo"
      "ClientMessage\022&\n\013rtcGameInfo\030\001 \001(\0132\017.Web"
      "RTCGameInfoH\000B\t\n\007message\"\305\001\n\022RoomWrapped"
      "Message\022\035\n\010roomInfo\030\001 \001(\0132\t.RoomInfoH\000\0227"
      "\n\022responceInvitation\030\002 \001(\0132\031.ResponceOnG"
      "ameInvitationH\000\022+\n\014responceView\030\003 \001(\0132\023."
      "ResponceOnGameViewH\000\022\037\n\tstartGame\030\004 \001(\0132"
      "\n.StartGameH\000B\t\n\007message\"L\n\024InvitationTo"
      "PlayGame\022\022\n\nclientPort\030\001 \001(\005\022\020\n\010clientIp"
      "\030\002 \001(\t\022\016\n\006ticket\030\003 \001(\005\"L\n\024InvitationToVi"
      "ewGame\022\022\n\nclientPort\030\001 \001(\005\022\020\n\010clientIp\030\002"
      " \001(\t\022\016\n\006ticket\030\003 \001(\005\"<\n\033ListenerToClient"
      "GamesStates\022\035\n\tgameState\030\001 \003(\0132\n.GameSta"
      "te\"\215\001\n\014rtcGameState\022\021\n\tgameRTCID\030\001 \001(\005\022\020"
      "\n\010gameName\030\002 \001(\t\022\020\n\010roomSize\030\003 \001(\005\022\033\n\023cu"
      "rrentPlayersCount\030\004 \001(\005\022)\n\014playerStatus\030"
      "\005 \001(\0162\023.WebRTCPlayerStatus\"E\n\"ListenerTo"
      "ClientsWebRTCGamesStates\022\037\n\010rtcState\030\001 \003"
      "(\0132\r.rtcGameState\"b\n\035ListenerToClientsWe"
      "bRTCRefuse\022\021\n\tgameRTCID\030\001 \001(\005\022.\n\014refuseR"
      "eason\030\002 \001(\0162\030.WebRTCGameRefuseReasons\"\210\003"
      "\n\036ListenerToClientWrappedMessage\0221\n\020invi"
      "tationToPlay\030\001 \001(\0132\025.InvitationToPlayGam"
      "eH\000\022.\n\006states\030\002 \001(\0132\034.ListenerToClientGa"
      "mesStatesH\000\0221\n\020invitationToView\030\003 \001(\0132\025."
      "InvitationToViewGameH\000\0228\n\trtcStates\030\004 \001("
      "\0132#.ListenerToClientsWebRTCGamesStatesH\000"
      "\0223\n\trtcRefuse\030\005 \001(\0132\036.ListenerToClientsW"
      "ebRTCRefuseH\000\022)\n\010rtcOffer\030\006 \001(\0132\025.RTCAdm"
      "in2ClientOfferH\000\022+\n\trtcAnswer\030\007 \001(\0132\026.RT"
      "CClient2AdminAnswerH\000B\t\n\007message\"\207\001\n\024Ser"
      "verWrappedMessage\0221\n\020invitationToPlay\030\001 "
      "\001(\0132\025.InvitationToPlayGameH\000\0221\n\020invitati"
      "onToView\030\002 \001(\0132\025.InvitationToViewGameH\000B"
      "\t\n\007message\"\"\n\013KeyboardKey\022\023\n\013keyboardKey"
      "\030\001 \001(\005\"\024\n\004Ping\022\014\n\004ping\030\001 \001(\005\"\031\n\010SetQulon"
      "\022\r\n\005qulon\030\001 \001(\002\")\n\020SetLightVelocity\022\025\n\rl"
      "ightVelocity\030\001 \001(\002\"3\n\025SetMagneticCalcula"
      "ted\022\032\n\022magneticCalculated\030\001 \001(\010\"\323\001\n\024Clie"
      "ntWrappedMessage\022\033\n\003key\030\001 \001(\0132\014.Keyboard"
      "KeyH\000\022\025\n\004ping\030\002 \001(\0132\005.PingH\000\022\032\n\005qulon\030\003 "
      "\001(\0132\t.SetQulonH\000\022*\n\rlightVelocity\030\004 \001(\0132"
      "\021.SetLightVelocityH\000\0224\n\022magneticCalculat"
      "ed\030\005 \001(\0132\026.SetMagneticCalculatedH\000B\t\n\007me"
      "ssage*5\n\017ShowPaletteType\022\017\n\013sptDiscrete\020"
      "\000\022\021\n\rsptContinuous\020\001*P\n\022WebRTCPlayerStat"
      "us\022\021\n\rrtcPlayerNone\020\000\022\022\n\016rtcPlayerAdmin\020"
      "\001\022\023\n\017rtcPlayerClient\020\002*M\n\027WebRTCGameRefu"
      "seReasons\022\031\n\025rtcRefuseNoGameWithId\020\000\022\027\n\023"
      "rtcRefuseRoomIsFull\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_listener.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_client_5flistener_2eproto
const ::google::protobuf::EnumDescriptor* RoomInfo_GameStatusEnum_descriptor() {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5flistener_2eproto::file_level_enum_descriptors[0];
}
bool RoomInfo_GameStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoomInfo_GameStatusEnum RoomInfo::gseNone;
const RoomInfo_GameStatusEnum RoomInfo::gseWaiting;
const RoomInfo_GameStatusEnum RoomInfo::gsePlaying;
const RoomInfo_GameStatusEnum RoomInfo::GameStatusEnum_MIN;
const RoomInfo_GameStatusEnum RoomInfo::GameStatusEnum_MAX;
const int RoomInfo::GameStatusEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OneChargeInfo_Charge2DType_descriptor() {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5flistener_2eproto::file_level_enum_descriptors[1];
}
bool OneChargeInfo_Charge2DType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OneChargeInfo_Charge2DType OneChargeInfo::ctStatic;
const OneChargeInfo_Charge2DType OneChargeInfo::ctDynamic;
const OneChargeInfo_Charge2DType OneChargeInfo::Charge2DType_MIN;
const OneChargeInfo_Charge2DType OneChargeInfo::Charge2DType_MAX;
const int OneChargeInfo::Charge2DType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ShowPaletteType_descriptor() {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5flistener_2eproto::file_level_enum_descriptors[2];
}
bool ShowPaletteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WebRTCPlayerStatus_descriptor() {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5flistener_2eproto::file_level_enum_descriptors[3];
}
bool WebRTCPlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WebRTCGameRefuseReasons_descriptor() {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_5flistener_2eproto::file_level_enum_descriptors[4];
}
bool WebRTCGameRefuseReasons_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RoomInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfo::kRoomNameFieldNumber;
const int RoomInfo::kGameStatusFieldNumber;
const int RoomInfo::kRoomSizeFieldNumber;
const int RoomInfo::kWaitingSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfo::RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RoomInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  ::memcpy(&gamestatus_, &from.gamestatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&waitingsize_) -
    reinterpret_cast<char*>(&gamestatus_)) + sizeof(waitingsize_));
  // @@protoc_insertion_point(copy_constructor:RoomInfo)
}

void RoomInfo::SharedCtor() {
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gamestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waitingsize_) -
      reinterpret_cast<char*>(&gamestatus_)) + sizeof(waitingsize_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomInfo& RoomInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RoomInfo.base);
  return *internal_default_instance();
}


void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gamestatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waitingsize_) -
      reinterpret_cast<char*>(&gamestatus_)) + sizeof(waitingsize_));
  _internal_metadata_.Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string roomName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomInfo.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoomInfo.GameStatusEnum gameStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamestatus(static_cast< ::RoomInfo_GameStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 waitingSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waitingsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomInfo.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // .RoomInfo.GameStatusEnum gameStatus = 2;
  if (this->gamestatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamestatus(), output);
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomsize(), output);
  }

  // int32 waitingSize = 4;
  if (this->waitingsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->waitingsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomInfo)
}

::google::protobuf::uint8* RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomInfo.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // .RoomInfo.GameStatusEnum gameStatus = 2;
  if (this->gamestatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gamestatus(), target);
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomsize(), target);
  }

  // int32 waitingSize = 4;
  if (this->waitingsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->waitingsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string roomName = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // .RoomInfo.GameStatusEnum gameStatus = 2;
  if (this->gamestatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestatus());
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomsize());
  }

  // int32 waitingSize = 4;
  if (this->waitingsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waitingsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.gamestatus() != 0) {
    set_gamestatus(from.gamestatus());
  }
  if (from.roomsize() != 0) {
    set_roomsize(from.roomsize());
  }
  if (from.waitingsize() != 0) {
    set_waitingsize(from.waitingsize());
  }
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  roomname_.Swap(&other->roomname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamestatus_, other->gamestatus_);
  swap(roomsize_, other->roomsize_);
  swap(waitingsize_, other->waitingsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponceOnGameInvitation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponceOnGameInvitation::kResponceFieldNumber;
const int ResponceOnGameInvitation::kTicketFieldNumber;
const int ResponceOnGameInvitation::kClientIpFieldNumber;
const int ResponceOnGameInvitation::kClientPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponceOnGameInvitation::ResponceOnGameInvitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameInvitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponceOnGameInvitation)
}
ResponceOnGameInvitation::ResponceOnGameInvitation(const ResponceOnGameInvitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientip().size() > 0) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  ::memcpy(&responce_, &from.responce_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientport_) -
    reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
  // @@protoc_insertion_point(copy_constructor:ResponceOnGameInvitation)
}

void ResponceOnGameInvitation::SharedCtor() {
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientport_) -
      reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
}

ResponceOnGameInvitation::~ResponceOnGameInvitation() {
  // @@protoc_insertion_point(destructor:ResponceOnGameInvitation)
  SharedDtor();
}

void ResponceOnGameInvitation::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponceOnGameInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponceOnGameInvitation::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponceOnGameInvitation& ResponceOnGameInvitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameInvitation.base);
  return *internal_default_instance();
}


void ResponceOnGameInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponceOnGameInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientport_) -
      reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
  _internal_metadata_.Clear();
}

bool ResponceOnGameInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResponceOnGameInvitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool responce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientip().data(), static_cast<int>(this->clientip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ResponceOnGameInvitation.clientIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponceOnGameInvitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponceOnGameInvitation)
  return false;
#undef DO_
}

void ResponceOnGameInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponceOnGameInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool responce = 1;
  if (this->responce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responce(), output);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ticket(), output);
  }

  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResponceOnGameInvitation.clientIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientip(), output);
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ResponceOnGameInvitation)
}

::google::protobuf::uint8* ResponceOnGameInvitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ResponceOnGameInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool responce = 1;
  if (this->responce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responce(), target);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ticket(), target);
  }

  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResponceOnGameInvitation.clientIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientip(), target);
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponceOnGameInvitation)
  return target;
}

size_t ResponceOnGameInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponceOnGameInvitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  // bool responce = 1;
  if (this->responce() != 0) {
    total_size += 1 + 1;
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponceOnGameInvitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResponceOnGameInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponceOnGameInvitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponceOnGameInvitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResponceOnGameInvitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResponceOnGameInvitation)
    MergeFrom(*source);
  }
}

void ResponceOnGameInvitation::MergeFrom(const ResponceOnGameInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponceOnGameInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.responce() != 0) {
    set_responce(from.responce());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
  if (from.clientport() != 0) {
    set_clientport(from.clientport());
  }
}

void ResponceOnGameInvitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResponceOnGameInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponceOnGameInvitation::CopyFrom(const ResponceOnGameInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponceOnGameInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponceOnGameInvitation::IsInitialized() const {
  return true;
}

void ResponceOnGameInvitation::Swap(ResponceOnGameInvitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponceOnGameInvitation::InternalSwap(ResponceOnGameInvitation* other) {
  using std::swap;
  clientip_.Swap(&other->clientip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(responce_, other->responce_);
  swap(ticket_, other->ticket_);
  swap(clientport_, other->clientport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponceOnGameInvitation::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponceOnGameView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponceOnGameView::kResponceFieldNumber;
const int ResponceOnGameView::kTicketFieldNumber;
const int ResponceOnGameView::kClientIpFieldNumber;
const int ResponceOnGameView::kClientPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponceOnGameView::ResponceOnGameView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameView.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponceOnGameView)
}
ResponceOnGameView::ResponceOnGameView(const ResponceOnGameView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientip().size() > 0) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  ::memcpy(&responce_, &from.responce_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientport_) -
    reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
  // @@protoc_insertion_point(copy_constructor:ResponceOnGameView)
}

void ResponceOnGameView::SharedCtor() {
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientport_) -
      reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
}

ResponceOnGameView::~ResponceOnGameView() {
  // @@protoc_insertion_point(destructor:ResponceOnGameView)
  SharedDtor();
}

void ResponceOnGameView::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponceOnGameView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponceOnGameView::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponceOnGameView& ResponceOnGameView::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ResponceOnGameView.base);
  return *internal_default_instance();
}


void ResponceOnGameView::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponceOnGameView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientport_) -
      reinterpret_cast<char*>(&responce_)) + sizeof(clientport_));
  _internal_metadata_.Clear();
}

bool ResponceOnGameView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResponceOnGameView)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool responce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientip().data(), static_cast<int>(this->clientip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ResponceOnGameView.clientIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clientPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponceOnGameView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponceOnGameView)
  return false;
#undef DO_
}

void ResponceOnGameView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponceOnGameView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool responce = 1;
  if (this->responce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responce(), output);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ticket(), output);
  }

  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResponceOnGameView.clientIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientip(), output);
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ResponceOnGameView)
}

::google::protobuf::uint8* ResponceOnGameView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ResponceOnGameView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool responce = 1;
  if (this->responce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responce(), target);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ticket(), target);
  }

  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ResponceOnGameView.clientIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientip(), target);
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponceOnGameView)
  return target;
}

size_t ResponceOnGameView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponceOnGameView)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientIp = 3;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  // bool responce = 1;
  if (this->responce() != 0) {
    total_size += 1 + 1;
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  // int32 clientPort = 4;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponceOnGameView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResponceOnGameView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponceOnGameView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponceOnGameView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResponceOnGameView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResponceOnGameView)
    MergeFrom(*source);
  }
}

void ResponceOnGameView::MergeFrom(const ResponceOnGameView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponceOnGameView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.responce() != 0) {
    set_responce(from.responce());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
  if (from.clientport() != 0) {
    set_clientport(from.clientport());
  }
}

void ResponceOnGameView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResponceOnGameView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponceOnGameView::CopyFrom(const ResponceOnGameView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponceOnGameView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponceOnGameView::IsInitialized() const {
  return true;
}

void ResponceOnGameView::Swap(ResponceOnGameView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponceOnGameView::InternalSwap(ResponceOnGameView* other) {
  using std::swap;
  clientip_.Swap(&other->clientip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(responce_, other->responce_);
  swap(ticket_, other->ticket_);
  swap(clientport_, other->clientport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponceOnGameView::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartGame::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartGame::StartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_StartGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartGame)
}
StartGame::StartGame(const StartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_ = from.ticket_;
  // @@protoc_insertion_point(copy_constructor:StartGame)
}

void StartGame::SharedCtor() {
  ticket_ = 0;
}

StartGame::~StartGame() {
  // @@protoc_insertion_point(destructor:StartGame)
  SharedDtor();
}

void StartGame::SharedDtor() {
}

void StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartGame::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartGame& StartGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_StartGame.base);
  return *internal_default_instance();
}


void StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_ = 0;
  _internal_metadata_.Clear();
}

bool StartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartGame)
  return false;
#undef DO_
}

void StartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ticket = 1;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:StartGame)
}

::google::protobuf::uint8* StartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ticket = 1;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartGame)
  return target;
}

size_t StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ticket = 1;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartGame)
    MergeFrom(*source);
  }
}

void StartGame::MergeFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void StartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGame::CopyFrom(const StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGame::IsInitialized() const {
  return true;
}

void StartGame::Swap(StartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartGame::InternalSwap(StartGame* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartGame::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OneChargeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneChargeInfo::kIdFieldNumber;
const int OneChargeInfo::kTypeFieldNumber;
const int OneChargeInfo::kMFieldNumber;
const int OneChargeInfo::kChargeFieldNumber;
const int OneChargeInfo::kXFieldNumber;
const int OneChargeInfo::kYFieldNumber;
const int OneChargeInfo::kVxFieldNumber;
const int OneChargeInfo::kVyFieldNumber;
const int OneChargeInfo::kFexFieldNumber;
const int OneChargeInfo::kFeyFieldNumber;
const int OneChargeInfo::kFbxFieldNumber;
const int OneChargeInfo::kFbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneChargeInfo::OneChargeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_OneChargeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneChargeInfo)
}
OneChargeInfo::OneChargeInfo(const OneChargeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fby_) -
    reinterpret_cast<char*>(&id_)) + sizeof(fby_));
  // @@protoc_insertion_point(copy_constructor:OneChargeInfo)
}

void OneChargeInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fby_) -
      reinterpret_cast<char*>(&id_)) + sizeof(fby_));
}

OneChargeInfo::~OneChargeInfo() {
  // @@protoc_insertion_point(destructor:OneChargeInfo)
  SharedDtor();
}

void OneChargeInfo::SharedDtor() {
}

void OneChargeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OneChargeInfo::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneChargeInfo& OneChargeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_OneChargeInfo.base);
  return *internal_default_instance();
}


void OneChargeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OneChargeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fby_) -
      reinterpret_cast<char*>(&id_)) + sizeof(fby_));
  _internal_metadata_.Clear();
}

bool OneChargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneChargeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OneChargeInfo.Charge2DType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::OneChargeInfo_Charge2DType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float m = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float charge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fey = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fbx = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fbx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fby = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneChargeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneChargeInfo)
  return false;
#undef DO_
}

void OneChargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneChargeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .OneChargeInfo.Charge2DType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // float m = 3;
  if (this->m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->m(), output);
  }

  // float charge = 4;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->charge(), output);
  }

  // float x = 5;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // float y = 6;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // float vx = 7;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vx(), output);
  }

  // float vy = 8;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->vy(), output);
  }

  // float fex = 9;
  if (this->fex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fex(), output);
  }

  // float fey = 10;
  if (this->fey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fey(), output);
  }

  // float fbx = 11;
  if (this->fbx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->fbx(), output);
  }

  // float fby = 12;
  if (this->fby() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fby(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OneChargeInfo)
}

::google::protobuf::uint8* OneChargeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneChargeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .OneChargeInfo.Charge2DType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // float m = 3;
  if (this->m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->m(), target);
  }

  // float charge = 4;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->charge(), target);
  }

  // float x = 5;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // float y = 6;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // float vx = 7;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vx(), target);
  }

  // float vy = 8;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->vy(), target);
  }

  // float fex = 9;
  if (this->fex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fex(), target);
  }

  // float fey = 10;
  if (this->fey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fey(), target);
  }

  // float fbx = 11;
  if (this->fbx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->fbx(), target);
  }

  // float fby = 12;
  if (this->fby() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fby(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneChargeInfo)
  return target;
}

size_t OneChargeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneChargeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .OneChargeInfo.Charge2DType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float m = 3;
  if (this->m() != 0) {
    total_size += 1 + 4;
  }

  // float charge = 4;
  if (this->charge() != 0) {
    total_size += 1 + 4;
  }

  // float x = 5;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 6;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float vx = 7;
  if (this->vx() != 0) {
    total_size += 1 + 4;
  }

  // float vy = 8;
  if (this->vy() != 0) {
    total_size += 1 + 4;
  }

  // float fex = 9;
  if (this->fex() != 0) {
    total_size += 1 + 4;
  }

  // float fey = 10;
  if (this->fey() != 0) {
    total_size += 1 + 4;
  }

  // float fbx = 11;
  if (this->fbx() != 0) {
    total_size += 1 + 4;
  }

  // float fby = 12;
  if (this->fby() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneChargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneChargeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OneChargeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneChargeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneChargeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneChargeInfo)
    MergeFrom(*source);
  }
}

void OneChargeInfo::MergeFrom(const OneChargeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneChargeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.m() != 0) {
    set_m(from.m());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.fex() != 0) {
    set_fex(from.fex());
  }
  if (from.fey() != 0) {
    set_fey(from.fey());
  }
  if (from.fbx() != 0) {
    set_fbx(from.fbx());
  }
  if (from.fby() != 0) {
    set_fby(from.fby());
  }
}

void OneChargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneChargeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneChargeInfo::CopyFrom(const OneChargeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneChargeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneChargeInfo::IsInitialized() const {
  return true;
}

void OneChargeInfo::Swap(OneChargeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneChargeInfo::InternalSwap(OneChargeInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(m_, other->m_);
  swap(charge_, other->charge_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(fex_, other->fex_);
  swap(fey_, other->fey_);
  swap(fbx_, other->fbx_);
  swap(fby_, other->fby_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OneChargeInfo::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShowStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowStruct::kPaletteTypeFieldNumber;
const int ShowStruct::kPaletteNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowStruct::ShowStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ShowStruct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowStruct)
}
ShowStruct::ShowStruct(const ShowStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  palettename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.palettename().size() > 0) {
    palettename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.palettename_);
  }
  palettetype_ = from.palettetype_;
  // @@protoc_insertion_point(copy_constructor:ShowStruct)
}

void ShowStruct::SharedCtor() {
  palettename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  palettetype_ = 0;
}

ShowStruct::~ShowStruct() {
  // @@protoc_insertion_point(destructor:ShowStruct)
  SharedDtor();
}

void ShowStruct::SharedDtor() {
  palettename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShowStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShowStruct::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowStruct& ShowStruct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ShowStruct.base);
  return *internal_default_instance();
}


void ShowStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  palettename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  palettetype_ = 0;
  _internal_metadata_.Clear();
}

bool ShowStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShowStruct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ShowPaletteType paletteType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_palettetype(static_cast< ::ShowPaletteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string paletteName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_palettename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->palettename().data(), static_cast<int>(this->palettename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ShowStruct.paletteName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShowStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowStruct)
  return false;
#undef DO_
}

void ShowStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ShowPaletteType paletteType = 1;
  if (this->palettetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->palettetype(), output);
  }

  // string paletteName = 2;
  if (this->palettename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->palettename().data(), static_cast<int>(this->palettename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ShowStruct.paletteName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->palettename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ShowStruct)
}

::google::protobuf::uint8* ShowStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ShowPaletteType paletteType = 1;
  if (this->palettetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->palettetype(), target);
  }

  // string paletteName = 2;
  if (this->palettename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->palettename().data(), static_cast<int>(this->palettename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ShowStruct.paletteName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->palettename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowStruct)
  return target;
}

size_t ShowStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowStruct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string paletteName = 2;
  if (this->palettename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->palettename());
  }

  // .ShowPaletteType paletteType = 1;
  if (this->palettetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->palettetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShowStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShowStruct)
    MergeFrom(*source);
  }
}

void ShowStruct::MergeFrom(const ShowStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.palettename().size() > 0) {

    palettename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.palettename_);
  }
  if (from.palettetype() != 0) {
    set_palettetype(from.palettetype());
  }
}

void ShowStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowStruct::CopyFrom(const ShowStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowStruct::IsInitialized() const {
  return true;
}

void ShowStruct::Swap(ShowStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowStruct::InternalSwap(ShowStruct* other) {
  using std::swap;
  palettename_.Swap(&other->palettename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(palettetype_, other->palettetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShowStruct::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SceneGeometry::InitAsDefaultInstance() {
  ::_SceneGeometry_default_instance_._instance.get_mutable()->forcesshowstruct_ = const_cast< ::ShowStruct*>(
      ::ShowStruct::internal_default_instance());
  ::_SceneGeometry_default_instance_._instance.get_mutable()->eqpotentialsshowstruct_ = const_cast< ::ShowStruct*>(
      ::ShowStruct::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGeometry::kWidthFieldNumber;
const int SceneGeometry::kHeightFieldNumber;
const int SceneGeometry::kQulonFieldNumber;
const int SceneGeometry::kLightVelocityFieldNumber;
const int SceneGeometry::kIfMagneticFieldNumber;
const int SceneGeometry::kForcesShowStructFieldNumber;
const int SceneGeometry::kEqPotentialsShowStructFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGeometry::SceneGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_SceneGeometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneGeometry)
}
SceneGeometry::SceneGeometry(const SceneGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forcesshowstruct()) {
    forcesshowstruct_ = new ::ShowStruct(*from.forcesshowstruct_);
  } else {
    forcesshowstruct_ = NULL;
  }
  if (from.has_eqpotentialsshowstruct()) {
    eqpotentialsshowstruct_ = new ::ShowStruct(*from.eqpotentialsshowstruct_);
  } else {
    eqpotentialsshowstruct_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&ifmagnetic_) -
    reinterpret_cast<char*>(&width_)) + sizeof(ifmagnetic_));
  // @@protoc_insertion_point(copy_constructor:SceneGeometry)
}

void SceneGeometry::SharedCtor() {
  ::memset(&forcesshowstruct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ifmagnetic_) -
      reinterpret_cast<char*>(&forcesshowstruct_)) + sizeof(ifmagnetic_));
}

SceneGeometry::~SceneGeometry() {
  // @@protoc_insertion_point(destructor:SceneGeometry)
  SharedDtor();
}

void SceneGeometry::SharedDtor() {
  if (this != internal_default_instance()) delete forcesshowstruct_;
  if (this != internal_default_instance()) delete eqpotentialsshowstruct_;
}

void SceneGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SceneGeometry::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGeometry& SceneGeometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_SceneGeometry.base);
  return *internal_default_instance();
}


void SceneGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && forcesshowstruct_ != NULL) {
    delete forcesshowstruct_;
  }
  forcesshowstruct_ = NULL;
  if (GetArenaNoVirtual() == NULL && eqpotentialsshowstruct_ != NULL) {
    delete eqpotentialsshowstruct_;
  }
  eqpotentialsshowstruct_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ifmagnetic_) -
      reinterpret_cast<char*>(&width_)) + sizeof(ifmagnetic_));
  _internal_metadata_.Clear();
}

bool SceneGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneGeometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float qulon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qulon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lightVelocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ifMagnetic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifmagnetic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ShowStruct forcesShowStruct = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forcesshowstruct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ShowStruct eqPotentialsShowStruct = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eqpotentialsshowstruct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneGeometry)
  return false;
#undef DO_
}

void SceneGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // float qulon = 3;
  if (this->qulon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->qulon(), output);
  }

  // float lightVelocity = 4;
  if (this->lightvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lightvelocity(), output);
  }

  // bool ifMagnetic = 5;
  if (this->ifmagnetic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ifmagnetic(), output);
  }

  // .ShowStruct forcesShowStruct = 6;
  if (this->has_forcesshowstruct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_forcesshowstruct(), output);
  }

  // .ShowStruct eqPotentialsShowStruct = 7;
  if (this->has_eqpotentialsshowstruct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_eqpotentialsshowstruct(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneGeometry)
}

::google::protobuf::uint8* SceneGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SceneGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // float qulon = 3;
  if (this->qulon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->qulon(), target);
  }

  // float lightVelocity = 4;
  if (this->lightvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lightvelocity(), target);
  }

  // bool ifMagnetic = 5;
  if (this->ifmagnetic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ifmagnetic(), target);
  }

  // .ShowStruct forcesShowStruct = 6;
  if (this->has_forcesshowstruct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_forcesshowstruct(), deterministic, target);
  }

  // .ShowStruct eqPotentialsShowStruct = 7;
  if (this->has_eqpotentialsshowstruct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_eqpotentialsshowstruct(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneGeometry)
  return target;
}

size_t SceneGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ShowStruct forcesShowStruct = 6;
  if (this->has_forcesshowstruct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *forcesshowstruct_);
  }

  // .ShowStruct eqPotentialsShowStruct = 7;
  if (this->has_eqpotentialsshowstruct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *eqpotentialsshowstruct_);
  }

  // float width = 1;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float qulon = 3;
  if (this->qulon() != 0) {
    total_size += 1 + 4;
  }

  // float lightVelocity = 4;
  if (this->lightvelocity() != 0) {
    total_size += 1 + 4;
  }

  // bool ifMagnetic = 5;
  if (this->ifmagnetic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneGeometry)
    MergeFrom(*source);
  }
}

void SceneGeometry::MergeFrom(const SceneGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_forcesshowstruct()) {
    mutable_forcesshowstruct()->::ShowStruct::MergeFrom(from.forcesshowstruct());
  }
  if (from.has_eqpotentialsshowstruct()) {
    mutable_eqpotentialsshowstruct()->::ShowStruct::MergeFrom(from.eqpotentialsshowstruct());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.qulon() != 0) {
    set_qulon(from.qulon());
  }
  if (from.lightvelocity() != 0) {
    set_lightvelocity(from.lightvelocity());
  }
  if (from.ifmagnetic() != 0) {
    set_ifmagnetic(from.ifmagnetic());
  }
}

void SceneGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGeometry::CopyFrom(const SceneGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGeometry::IsInitialized() const {
  return true;
}

void SceneGeometry::Swap(SceneGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGeometry::InternalSwap(SceneGeometry* other) {
  using std::swap;
  swap(forcesshowstruct_, other->forcesshowstruct_);
  swap(eqpotentialsshowstruct_, other->eqpotentialsshowstruct_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(qulon_, other->qulon_);
  swap(lightvelocity_, other->lightvelocity_);
  swap(ifmagnetic_, other->ifmagnetic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SceneGeometry::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTCGameClientRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTCGameClientRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTCGameClientRequest::RTCGameClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RTCGameClientRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTCGameClientRequest)
}
RTCGameClientRequest::RTCGameClientRequest(const RTCGameClientRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RTCGameClientRequest)
}

void RTCGameClientRequest::SharedCtor() {
  id_ = 0;
}

RTCGameClientRequest::~RTCGameClientRequest() {
  // @@protoc_insertion_point(destructor:RTCGameClientRequest)
  SharedDtor();
}

void RTCGameClientRequest::SharedDtor() {
}

void RTCGameClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RTCGameClientRequest::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTCGameClientRequest& RTCGameClientRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RTCGameClientRequest.base);
  return *internal_default_instance();
}


void RTCGameClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RTCGameClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

bool RTCGameClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTCGameClientRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTCGameClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTCGameClientRequest)
  return false;
#undef DO_
}

void RTCGameClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTCGameClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RTCGameClientRequest)
}

::google::protobuf::uint8* RTCGameClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RTCGameClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTCGameClientRequest)
  return target;
}

size_t RTCGameClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTCGameClientRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCGameClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTCGameClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCGameClientRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTCGameClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTCGameClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTCGameClientRequest)
    MergeFrom(*source);
  }
}

void RTCGameClientRequest::MergeFrom(const RTCGameClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTCGameClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void RTCGameClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTCGameClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCGameClientRequest::CopyFrom(const RTCGameClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTCGameClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCGameClientRequest::IsInitialized() const {
  return true;
}

void RTCGameClientRequest::Swap(RTCGameClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTCGameClientRequest::InternalSwap(RTCGameClientRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RTCGameClientRequest::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTCGameAdminRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTCGameAdminRequest::kGameNameFieldNumber;
const int RTCGameAdminRequest::kRoomSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTCGameAdminRequest::RTCGameAdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RTCGameAdminRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTCGameAdminRequest)
}
RTCGameAdminRequest::RTCGameAdminRequest(const RTCGameAdminRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamename().size() > 0) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  roomsize_ = from.roomsize_;
  // @@protoc_insertion_point(copy_constructor:RTCGameAdminRequest)
}

void RTCGameAdminRequest::SharedCtor() {
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomsize_ = 0;
}

RTCGameAdminRequest::~RTCGameAdminRequest() {
  // @@protoc_insertion_point(destructor:RTCGameAdminRequest)
  SharedDtor();
}

void RTCGameAdminRequest::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RTCGameAdminRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RTCGameAdminRequest::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTCGameAdminRequest& RTCGameAdminRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RTCGameAdminRequest.base);
  return *internal_default_instance();
}


void RTCGameAdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RTCGameAdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomsize_ = 0;
  _internal_metadata_.Clear();
}

bool RTCGameAdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTCGameAdminRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamename().data(), static_cast<int>(this->gamename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTCGameAdminRequest.gameName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTCGameAdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTCGameAdminRequest)
  return false;
#undef DO_
}

void RTCGameAdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTCGameAdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameName = 1;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCGameAdminRequest.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // int32 roomSize = 2;
  if (this->roomsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RTCGameAdminRequest)
}

::google::protobuf::uint8* RTCGameAdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RTCGameAdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameName = 1;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCGameAdminRequest.gameName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // int32 roomSize = 2;
  if (this->roomsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTCGameAdminRequest)
  return target;
}

size_t RTCGameAdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTCGameAdminRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gameName = 1;
  if (this->gamename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  // int32 roomSize = 2;
  if (this->roomsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCGameAdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTCGameAdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCGameAdminRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTCGameAdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTCGameAdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTCGameAdminRequest)
    MergeFrom(*source);
  }
}

void RTCGameAdminRequest::MergeFrom(const RTCGameAdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTCGameAdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamename().size() > 0) {

    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  if (from.roomsize() != 0) {
    set_roomsize(from.roomsize());
  }
}

void RTCGameAdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTCGameAdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCGameAdminRequest::CopyFrom(const RTCGameAdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTCGameAdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCGameAdminRequest::IsInitialized() const {
  return true;
}

void RTCGameAdminRequest::Swap(RTCGameAdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTCGameAdminRequest::InternalSwap(RTCGameAdminRequest* other) {
  using std::swap;
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomsize_, other->roomsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RTCGameAdminRequest::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayGameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayGameRequest::kIpFieldNumber;
const int PlayGameRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayGameRequest::PlayGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_PlayGameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayGameRequest)
}
PlayGameRequest::PlayGameRequest(const PlayGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:PlayGameRequest)
}

void PlayGameRequest::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

PlayGameRequest::~PlayGameRequest() {
  // @@protoc_insertion_point(destructor:PlayGameRequest)
  SharedDtor();
}

void PlayGameRequest::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayGameRequest::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayGameRequest& PlayGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_PlayGameRequest.base);
  return *internal_default_instance();
}


void PlayGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool PlayGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlayGameRequest.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayGameRequest)
  return false;
#undef DO_
}

void PlayGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayGameRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayGameRequest)
}

::google::protobuf::uint8* PlayGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayGameRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayGameRequest)
  return target;
}

size_t PlayGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayGameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayGameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayGameRequest)
    MergeFrom(*source);
  }
}

void PlayGameRequest::MergeFrom(const PlayGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PlayGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayGameRequest::CopyFrom(const PlayGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayGameRequest::IsInitialized() const {
  return true;
}

void PlayGameRequest::Swap(PlayGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayGameRequest::InternalSwap(PlayGameRequest* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayGameRequest::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ViewGameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewGameRequest::kIpFieldNumber;
const int ViewGameRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewGameRequest::ViewGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ViewGameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewGameRequest)
}
ViewGameRequest::ViewGameRequest(const ViewGameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ViewGameRequest)
}

void ViewGameRequest::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

ViewGameRequest::~ViewGameRequest() {
  // @@protoc_insertion_point(destructor:ViewGameRequest)
  SharedDtor();
}

void ViewGameRequest::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ViewGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ViewGameRequest::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewGameRequest& ViewGameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ViewGameRequest.base);
  return *internal_default_instance();
}


void ViewGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool ViewGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewGameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ViewGameRequest.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewGameRequest)
  return false;
#undef DO_
}

void ViewGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ViewGameRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewGameRequest)
}

::google::protobuf::uint8* ViewGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewGameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ViewGameRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewGameRequest)
  return target;
}

size_t ViewGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewGameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewGameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewGameRequest)
    MergeFrom(*source);
  }
}

void ViewGameRequest::MergeFrom(const ViewGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ViewGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewGameRequest::CopyFrom(const ViewGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewGameRequest::IsInitialized() const {
  return true;
}

void ViewGameRequest::Swap(ViewGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewGameRequest::InternalSwap(ViewGameRequest* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ViewGameRequest::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTCAdmin2ClientOffer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTCAdmin2ClientOffer::kGameRTCIDFieldNumber;
const int RTCAdmin2ClientOffer::kOfferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTCAdmin2ClientOffer::RTCAdmin2ClientOffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RTCAdmin2ClientOffer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTCAdmin2ClientOffer)
}
RTCAdmin2ClientOffer::RTCAdmin2ClientOffer(const RTCAdmin2ClientOffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.offer().size() > 0) {
    offer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_);
  }
  gamertcid_ = from.gamertcid_;
  // @@protoc_insertion_point(copy_constructor:RTCAdmin2ClientOffer)
}

void RTCAdmin2ClientOffer::SharedCtor() {
  offer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamertcid_ = 0;
}

RTCAdmin2ClientOffer::~RTCAdmin2ClientOffer() {
  // @@protoc_insertion_point(destructor:RTCAdmin2ClientOffer)
  SharedDtor();
}

void RTCAdmin2ClientOffer::SharedDtor() {
  offer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RTCAdmin2ClientOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RTCAdmin2ClientOffer::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTCAdmin2ClientOffer& RTCAdmin2ClientOffer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RTCAdmin2ClientOffer.base);
  return *internal_default_instance();
}


void RTCAdmin2ClientOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:RTCAdmin2ClientOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamertcid_ = 0;
  _internal_metadata_.Clear();
}

bool RTCAdmin2ClientOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTCAdmin2ClientOffer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gameRTCID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamertcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string offer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->offer().data(), static_cast<int>(this->offer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTCAdmin2ClientOffer.offer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTCAdmin2ClientOffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTCAdmin2ClientOffer)
  return false;
#undef DO_
}

void RTCAdmin2ClientOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTCAdmin2ClientOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamertcid(), output);
  }

  // string offer = 2;
  if (this->offer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offer().data(), static_cast<int>(this->offer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCAdmin2ClientOffer.offer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->offer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RTCAdmin2ClientOffer)
}

::google::protobuf::uint8* RTCAdmin2ClientOffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RTCAdmin2ClientOffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamertcid(), target);
  }

  // string offer = 2;
  if (this->offer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offer().data(), static_cast<int>(this->offer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCAdmin2ClientOffer.offer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->offer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTCAdmin2ClientOffer)
  return target;
}

size_t RTCAdmin2ClientOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTCAdmin2ClientOffer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string offer = 2;
  if (this->offer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->offer());
  }

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamertcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCAdmin2ClientOffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTCAdmin2ClientOffer)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCAdmin2ClientOffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTCAdmin2ClientOffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTCAdmin2ClientOffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTCAdmin2ClientOffer)
    MergeFrom(*source);
  }
}

void RTCAdmin2ClientOffer::MergeFrom(const RTCAdmin2ClientOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTCAdmin2ClientOffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offer().size() > 0) {

    offer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offer_);
  }
  if (from.gamertcid() != 0) {
    set_gamertcid(from.gamertcid());
  }
}

void RTCAdmin2ClientOffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTCAdmin2ClientOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCAdmin2ClientOffer::CopyFrom(const RTCAdmin2ClientOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTCAdmin2ClientOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCAdmin2ClientOffer::IsInitialized() const {
  return true;
}

void RTCAdmin2ClientOffer::Swap(RTCAdmin2ClientOffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTCAdmin2ClientOffer::InternalSwap(RTCAdmin2ClientOffer* other) {
  using std::swap;
  offer_.Swap(&other->offer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamertcid_, other->gamertcid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RTCAdmin2ClientOffer::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTCClient2AdminAnswer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTCClient2AdminAnswer::kGameRTCIDFieldNumber;
const int RTCClient2AdminAnswer::kAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTCClient2AdminAnswer::RTCClient2AdminAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RTCClient2AdminAnswer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTCClient2AdminAnswer)
}
RTCClient2AdminAnswer::RTCClient2AdminAnswer(const RTCClient2AdminAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  gamertcid_ = from.gamertcid_;
  // @@protoc_insertion_point(copy_constructor:RTCClient2AdminAnswer)
}

void RTCClient2AdminAnswer::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamertcid_ = 0;
}

RTCClient2AdminAnswer::~RTCClient2AdminAnswer() {
  // @@protoc_insertion_point(destructor:RTCClient2AdminAnswer)
  SharedDtor();
}

void RTCClient2AdminAnswer::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RTCClient2AdminAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RTCClient2AdminAnswer::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTCClient2AdminAnswer& RTCClient2AdminAnswer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RTCClient2AdminAnswer.base);
  return *internal_default_instance();
}


void RTCClient2AdminAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:RTCClient2AdminAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamertcid_ = 0;
  _internal_metadata_.Clear();
}

bool RTCClient2AdminAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTCClient2AdminAnswer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gameRTCID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamertcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string answer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answer().data(), static_cast<int>(this->answer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RTCClient2AdminAnswer.answer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTCClient2AdminAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTCClient2AdminAnswer)
  return false;
#undef DO_
}

void RTCClient2AdminAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTCClient2AdminAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamertcid(), output);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCClient2AdminAnswer.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->answer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RTCClient2AdminAnswer)
}

::google::protobuf::uint8* RTCClient2AdminAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RTCClient2AdminAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamertcid(), target);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RTCClient2AdminAnswer.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->answer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTCClient2AdminAnswer)
  return target;
}

size_t RTCClient2AdminAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTCClient2AdminAnswer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string answer = 2;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamertcid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCClient2AdminAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTCClient2AdminAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCClient2AdminAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTCClient2AdminAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTCClient2AdminAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTCClient2AdminAnswer)
    MergeFrom(*source);
  }
}

void RTCClient2AdminAnswer::MergeFrom(const RTCClient2AdminAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTCClient2AdminAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.gamertcid() != 0) {
    set_gamertcid(from.gamertcid());
  }
}

void RTCClient2AdminAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTCClient2AdminAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCClient2AdminAnswer::CopyFrom(const RTCClient2AdminAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTCClient2AdminAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCClient2AdminAnswer::IsInitialized() const {
  return true;
}

void RTCClient2AdminAnswer::Swap(RTCClient2AdminAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTCClient2AdminAnswer::InternalSwap(RTCClient2AdminAnswer* other) {
  using std::swap;
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamertcid_, other->gamertcid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RTCClient2AdminAnswer::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientQueryRequest::InitAsDefaultInstance() {
  ::_ClientQueryRequest_default_instance_.playrequest_ = const_cast< ::PlayGameRequest*>(
      ::PlayGameRequest::internal_default_instance());
  ::_ClientQueryRequest_default_instance_.viewrequest_ = const_cast< ::ViewGameRequest*>(
      ::ViewGameRequest::internal_default_instance());
  ::_ClientQueryRequest_default_instance_.rtcadminrequest_ = const_cast< ::RTCGameAdminRequest*>(
      ::RTCGameAdminRequest::internal_default_instance());
  ::_ClientQueryRequest_default_instance_.rtcclientrequest_ = const_cast< ::RTCGameClientRequest*>(
      ::RTCGameClientRequest::internal_default_instance());
  ::_ClientQueryRequest_default_instance_.rtcoffer_ = const_cast< ::RTCAdmin2ClientOffer*>(
      ::RTCAdmin2ClientOffer::internal_default_instance());
  ::_ClientQueryRequest_default_instance_.rtcanswer_ = const_cast< ::RTCClient2AdminAnswer*>(
      ::RTCClient2AdminAnswer::internal_default_instance());
}
void ClientQueryRequest::set_allocated_playrequest(::PlayGameRequest* playrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (playrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playrequest, submessage_arena);
    }
    set_has_playrequest();
    message_.playrequest_ = playrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.playRequest)
}
void ClientQueryRequest::set_allocated_viewrequest(::ViewGameRequest* viewrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (viewrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      viewrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, viewrequest, submessage_arena);
    }
    set_has_viewrequest();
    message_.viewrequest_ = viewrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.viewRequest)
}
void ClientQueryRequest::set_allocated_rtcadminrequest(::RTCGameAdminRequest* rtcadminrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcadminrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcadminrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcadminrequest, submessage_arena);
    }
    set_has_rtcadminrequest();
    message_.rtcadminrequest_ = rtcadminrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.rtcAdminRequest)
}
void ClientQueryRequest::set_allocated_rtcclientrequest(::RTCGameClientRequest* rtcclientrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcclientrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcclientrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcclientrequest, submessage_arena);
    }
    set_has_rtcclientrequest();
    message_.rtcclientrequest_ = rtcclientrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.rtcClientRequest)
}
void ClientQueryRequest::set_allocated_rtcoffer(::RTCAdmin2ClientOffer* rtcoffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcoffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcoffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcoffer, submessage_arena);
    }
    set_has_rtcoffer();
    message_.rtcoffer_ = rtcoffer;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.rtcOffer)
}
void ClientQueryRequest::set_allocated_rtcanswer(::RTCClient2AdminAnswer* rtcanswer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcanswer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcanswer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcanswer, submessage_arena);
    }
    set_has_rtcanswer();
    message_.rtcanswer_ = rtcanswer;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientQueryRequest.rtcAnswer)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientQueryRequest::kPlayRequestFieldNumber;
const int ClientQueryRequest::kViewRequestFieldNumber;
const int ClientQueryRequest::kRtcAdminRequestFieldNumber;
const int ClientQueryRequest::kRtcClientRequestFieldNumber;
const int ClientQueryRequest::kRtcOfferFieldNumber;
const int ClientQueryRequest::kRtcAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientQueryRequest::ClientQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ClientQueryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientQueryRequest)
}
ClientQueryRequest::ClientQueryRequest(const ClientQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kPlayRequest: {
      mutable_playrequest()->::PlayGameRequest::MergeFrom(from.playrequest());
      break;
    }
    case kViewRequest: {
      mutable_viewrequest()->::ViewGameRequest::MergeFrom(from.viewrequest());
      break;
    }
    case kRtcAdminRequest: {
      mutable_rtcadminrequest()->::RTCGameAdminRequest::MergeFrom(from.rtcadminrequest());
      break;
    }
    case kRtcClientRequest: {
      mutable_rtcclientrequest()->::RTCGameClientRequest::MergeFrom(from.rtcclientrequest());
      break;
    }
    case kRtcOffer: {
      mutable_rtcoffer()->::RTCAdmin2ClientOffer::MergeFrom(from.rtcoffer());
      break;
    }
    case kRtcAnswer: {
      mutable_rtcanswer()->::RTCClient2AdminAnswer::MergeFrom(from.rtcanswer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientQueryRequest)
}

void ClientQueryRequest::SharedCtor() {
  clear_has_message();
}

ClientQueryRequest::~ClientQueryRequest() {
  // @@protoc_insertion_point(destructor:ClientQueryRequest)
  SharedDtor();
}

void ClientQueryRequest::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void ClientQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientQueryRequest::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientQueryRequest& ClientQueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ClientQueryRequest.base);
  return *internal_default_instance();
}


void ClientQueryRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ClientQueryRequest)
  switch (message_case()) {
    case kPlayRequest: {
      delete message_.playrequest_;
      break;
    }
    case kViewRequest: {
      delete message_.viewrequest_;
      break;
    }
    case kRtcAdminRequest: {
      delete message_.rtcadminrequest_;
      break;
    }
    case kRtcClientRequest: {
      delete message_.rtcclientrequest_;
      break;
    }
    case kRtcOffer: {
      delete message_.rtcoffer_;
      break;
    }
    case kRtcAnswer: {
      delete message_.rtcanswer_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ClientQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool ClientQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientQueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PlayGameRequest playRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ViewGameRequest viewRequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_viewrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCGameAdminRequest rtcAdminRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcadminrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCGameClientRequest rtcClientRequest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcclientrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCAdmin2ClientOffer rtcOffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcoffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCClient2AdminAnswer rtcAnswer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcanswer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientQueryRequest)
  return false;
#undef DO_
}

void ClientQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayGameRequest playRequest = 1;
  if (has_playrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_playrequest(), output);
  }

  // .ViewGameRequest viewRequest = 2;
  if (has_viewrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_viewrequest(), output);
  }

  // .RTCGameAdminRequest rtcAdminRequest = 3;
  if (has_rtcadminrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rtcadminrequest(), output);
  }

  // .RTCGameClientRequest rtcClientRequest = 4;
  if (has_rtcclientrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rtcclientrequest(), output);
  }

  // .RTCAdmin2ClientOffer rtcOffer = 5;
  if (has_rtcoffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_rtcoffer(), output);
  }

  // .RTCClient2AdminAnswer rtcAnswer = 6;
  if (has_rtcanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_rtcanswer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientQueryRequest)
}

::google::protobuf::uint8* ClientQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlayGameRequest playRequest = 1;
  if (has_playrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_playrequest(), deterministic, target);
  }

  // .ViewGameRequest viewRequest = 2;
  if (has_viewrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_viewrequest(), deterministic, target);
  }

  // .RTCGameAdminRequest rtcAdminRequest = 3;
  if (has_rtcadminrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rtcadminrequest(), deterministic, target);
  }

  // .RTCGameClientRequest rtcClientRequest = 4;
  if (has_rtcclientrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rtcclientrequest(), deterministic, target);
  }

  // .RTCAdmin2ClientOffer rtcOffer = 5;
  if (has_rtcoffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_rtcoffer(), deterministic, target);
  }

  // .RTCClient2AdminAnswer rtcAnswer = 6;
  if (has_rtcanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_rtcanswer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientQueryRequest)
  return target;
}

size_t ClientQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientQueryRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .PlayGameRequest playRequest = 1;
    case kPlayRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.playrequest_);
      break;
    }
    // .ViewGameRequest viewRequest = 2;
    case kViewRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.viewrequest_);
      break;
    }
    // .RTCGameAdminRequest rtcAdminRequest = 3;
    case kRtcAdminRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcadminrequest_);
      break;
    }
    // .RTCGameClientRequest rtcClientRequest = 4;
    case kRtcClientRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcclientrequest_);
      break;
    }
    // .RTCAdmin2ClientOffer rtcOffer = 5;
    case kRtcOffer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcoffer_);
      break;
    }
    // .RTCClient2AdminAnswer rtcAnswer = 6;
    case kRtcAnswer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcanswer_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientQueryRequest)
    MergeFrom(*source);
  }
}

void ClientQueryRequest::MergeFrom(const ClientQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kPlayRequest: {
      mutable_playrequest()->::PlayGameRequest::MergeFrom(from.playrequest());
      break;
    }
    case kViewRequest: {
      mutable_viewrequest()->::ViewGameRequest::MergeFrom(from.viewrequest());
      break;
    }
    case kRtcAdminRequest: {
      mutable_rtcadminrequest()->::RTCGameAdminRequest::MergeFrom(from.rtcadminrequest());
      break;
    }
    case kRtcClientRequest: {
      mutable_rtcclientrequest()->::RTCGameClientRequest::MergeFrom(from.rtcclientrequest());
      break;
    }
    case kRtcOffer: {
      mutable_rtcoffer()->::RTCAdmin2ClientOffer::MergeFrom(from.rtcoffer());
      break;
    }
    case kRtcAnswer: {
      mutable_rtcanswer()->::RTCClient2AdminAnswer::MergeFrom(from.rtcanswer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ClientQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQueryRequest::CopyFrom(const ClientQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQueryRequest::IsInitialized() const {
  return true;
}

void ClientQueryRequest::Swap(ClientQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientQueryRequest::InternalSwap(ClientQueryRequest* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientQueryRequest::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomToClient::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomToClient::kPacketIdFieldNumber;
const int RoomToClient::kChargeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomToClient::RoomToClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RoomToClient.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomToClient)
}
RoomToClient::RoomToClient(const RoomToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chargeinfo_(from.chargeinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packetid_ = from.packetid_;
  // @@protoc_insertion_point(copy_constructor:RoomToClient)
}

void RoomToClient::SharedCtor() {
  packetid_ = 0;
}

RoomToClient::~RoomToClient() {
  // @@protoc_insertion_point(destructor:RoomToClient)
  SharedDtor();
}

void RoomToClient::SharedDtor() {
}

void RoomToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomToClient::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomToClient& RoomToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RoomToClient.base);
  return *internal_default_instance();
}


void RoomToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chargeinfo_.Clear();
  packetid_ = 0;
  _internal_metadata_.Clear();
}

bool RoomToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 packetId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OneChargeInfo chargeInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chargeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomToClient)
  return false;
#undef DO_
}

void RoomToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->packetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  // repeated .OneChargeInfo chargeInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chargeinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->chargeinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomToClient)
}

::google::protobuf::uint8* RoomToClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoomToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->packetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  // repeated .OneChargeInfo chargeInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chargeinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->chargeinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomToClient)
  return target;
}

size_t RoomToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomToClient)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .OneChargeInfo chargeInfo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chargeinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chargeinfo(static_cast<int>(i)));
    }
  }

  // int32 packetId = 1;
  if (this->packetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomToClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomToClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomToClient)
    MergeFrom(*source);
  }
}

void RoomToClient::MergeFrom(const RoomToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chargeinfo_.MergeFrom(from.chargeinfo_);
  if (from.packetid() != 0) {
    set_packetid(from.packetid());
  }
}

void RoomToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomToClient::CopyFrom(const RoomToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomToClient::IsInitialized() const {
  return true;
}

void RoomToClient::Swap(RoomToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomToClient::InternalSwap(RoomToClient* other) {
  using std::swap;
  CastToBase(&chargeinfo_)->InternalSwap(CastToBase(&other->chargeinfo_));
  swap(packetid_, other->packetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomToClient::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
  ::_GameState_default_instance_._instance.get_mutable()->roominfo_ = const_cast< ::RoomInfo*>(
      ::RoomInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kRoomPortFieldNumber;
const int GameState::kRoomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roominfo()) {
    roominfo_ = new ::RoomInfo(*from.roominfo_);
  } else {
    roominfo_ = NULL;
  }
  roomport_ = from.roomport_;
  // @@protoc_insertion_point(copy_constructor:GameState)
}

void GameState::SharedCtor() {
  ::memset(&roominfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomport_) -
      reinterpret_cast<char*>(&roominfo_)) + sizeof(roomport_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != internal_default_instance()) delete roominfo_;
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && roominfo_ != NULL) {
    delete roominfo_;
  }
  roominfo_ = NULL;
  roomport_ = 0;
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomPort = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RoomInfo roomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomPort = 1;
  if (this->roomport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomport(), output);
  }

  // .RoomInfo roomInfo = 2;
  if (this->has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_roominfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomPort = 1;
  if (this->roomport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomport(), target);
  }

  // .RoomInfo roomInfo = 2;
  if (this->has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_roominfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .RoomInfo roomInfo = 2;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // int32 roomPort = 1;
  if (this->roomport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    mutable_roominfo()->::RoomInfo::MergeFrom(from.roominfo());
  }
  if (from.roomport() != 0) {
    set_roomport(from.roomport());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  swap(roominfo_, other->roominfo_);
  swap(roomport_, other->roomport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInfo::InitAsDefaultInstance() {
  ::_GameInfo_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::SceneGeometry*>(
      ::SceneGeometry::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kGeometryFieldNumber;
const int GameInfo::kCurrentChargeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_GameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geometry()) {
    geometry_ = new ::SceneGeometry(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  currentchargeid_ = from.currentchargeid_;
  // @@protoc_insertion_point(copy_constructor:GameInfo)
}

void GameInfo::SharedCtor() {
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentchargeid_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(currentchargeid_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != internal_default_instance()) delete geometry_;
}

void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo& GameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_GameInfo.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) {
    delete geometry_;
  }
  geometry_ = NULL;
  currentchargeid_ = 0;
  _internal_metadata_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SceneGeometry geometry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentChargeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentchargeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SceneGeometry geometry = 1;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_geometry(), output);
  }

  // int32 currentChargeId = 2;
  if (this->currentchargeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentchargeid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SceneGeometry geometry = 1;
  if (this->has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_geometry(), deterministic, target);
  }

  // int32 currentChargeId = 2;
  if (this->currentchargeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentchargeid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .SceneGeometry geometry = 1;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // int32 currentChargeId = 2;
  if (this->currentchargeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentchargeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geometry()) {
    mutable_geometry()->::SceneGeometry::MergeFrom(from.geometry());
  }
  if (from.currentchargeid() != 0) {
    set_currentchargeid(from.currentchargeid());
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  swap(geometry_, other->geometry_);
  swap(currentchargeid_, other->currentchargeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomWrappedToClientMessage::InitAsDefaultInstance() {
  ::_RoomWrappedToClientMessage_default_instance_.roomtoclient_ = const_cast< ::RoomToClient*>(
      ::RoomToClient::internal_default_instance());
  ::_RoomWrappedToClientMessage_default_instance_.gameinfo_ = const_cast< ::GameInfo*>(
      ::GameInfo::internal_default_instance());
}
void RoomWrappedToClientMessage::set_allocated_roomtoclient(::RoomToClient* roomtoclient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (roomtoclient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roomtoclient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roomtoclient, submessage_arena);
    }
    set_has_roomtoclient();
    message_.roomtoclient_ = roomtoclient;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedToClientMessage.roomToClient)
}
void RoomWrappedToClientMessage::set_allocated_gameinfo(::GameInfo* gameinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (gameinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gameinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gameinfo, submessage_arena);
    }
    set_has_gameinfo();
    message_.gameinfo_ = gameinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedToClientMessage.gameInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomWrappedToClientMessage::kRoomToClientFieldNumber;
const int RoomWrappedToClientMessage::kGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomWrappedToClientMessage::RoomWrappedToClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RoomWrappedToClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomWrappedToClientMessage)
}
RoomWrappedToClientMessage::RoomWrappedToClientMessage(const RoomWrappedToClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRoomToClient: {
      mutable_roomtoclient()->::RoomToClient::MergeFrom(from.roomtoclient());
      break;
    }
    case kGameInfo: {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RoomWrappedToClientMessage)
}

void RoomWrappedToClientMessage::SharedCtor() {
  clear_has_message();
}

RoomWrappedToClientMessage::~RoomWrappedToClientMessage() {
  // @@protoc_insertion_point(destructor:RoomWrappedToClientMessage)
  SharedDtor();
}

void RoomWrappedToClientMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void RoomWrappedToClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomWrappedToClientMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomWrappedToClientMessage& RoomWrappedToClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RoomWrappedToClientMessage.base);
  return *internal_default_instance();
}


void RoomWrappedToClientMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:RoomWrappedToClientMessage)
  switch (message_case()) {
    case kRoomToClient: {
      delete message_.roomtoclient_;
      break;
    }
    case kGameInfo: {
      delete message_.gameinfo_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void RoomWrappedToClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomWrappedToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool RoomWrappedToClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomWrappedToClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RoomToClient roomToClient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roomtoclient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GameInfo gameInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomWrappedToClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomWrappedToClientMessage)
  return false;
#undef DO_
}

void RoomWrappedToClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomWrappedToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoomToClient roomToClient = 1;
  if (has_roomtoclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_roomtoclient(), output);
  }

  // .GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_gameinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomWrappedToClientMessage)
}

::google::protobuf::uint8* RoomWrappedToClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoomWrappedToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoomToClient roomToClient = 1;
  if (has_roomtoclient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_roomtoclient(), deterministic, target);
  }

  // .GameInfo gameInfo = 2;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_gameinfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomWrappedToClientMessage)
  return target;
}

size_t RoomWrappedToClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomWrappedToClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .RoomToClient roomToClient = 1;
    case kRoomToClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.roomtoclient_);
      break;
    }
    // .GameInfo gameInfo = 2;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.gameinfo_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomWrappedToClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomWrappedToClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomWrappedToClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomWrappedToClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomWrappedToClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomWrappedToClientMessage)
    MergeFrom(*source);
  }
}

void RoomWrappedToClientMessage::MergeFrom(const RoomWrappedToClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomWrappedToClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRoomToClient: {
      mutable_roomtoclient()->::RoomToClient::MergeFrom(from.roomtoclient());
      break;
    }
    case kGameInfo: {
      mutable_gameinfo()->::GameInfo::MergeFrom(from.gameinfo());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void RoomWrappedToClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomWrappedToClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomWrappedToClientMessage::CopyFrom(const RoomWrappedToClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomWrappedToClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomWrappedToClientMessage::IsInitialized() const {
  return true;
}

void RoomWrappedToClientMessage::Swap(RoomWrappedToClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomWrappedToClientMessage::InternalSwap(RoomWrappedToClientMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomWrappedToClientMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WebRTCGameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WebRTCGameInfo::kUrlFieldNumber;
const int WebRTCGameInfo::kGameidFieldNumber;
const int WebRTCGameInfo::kForcePaletteFieldNumber;
const int WebRTCGameInfo::kEqPotPaletteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WebRTCGameInfo::WebRTCGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_WebRTCGameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebRTCGameInfo)
}
WebRTCGameInfo::WebRTCGameInfo(const WebRTCGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  forcepalette_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.forcepalette().size() > 0) {
    forcepalette_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forcepalette_);
  }
  eqpotpalette_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.eqpotpalette().size() > 0) {
    eqpotpalette_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eqpotpalette_);
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:WebRTCGameInfo)
}

void WebRTCGameInfo::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forcepalette_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eqpotpalette_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
}

WebRTCGameInfo::~WebRTCGameInfo() {
  // @@protoc_insertion_point(destructor:WebRTCGameInfo)
  SharedDtor();
}

void WebRTCGameInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forcepalette_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eqpotpalette_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WebRTCGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WebRTCGameInfo::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WebRTCGameInfo& WebRTCGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_WebRTCGameInfo.base);
  return *internal_default_instance();
}


void WebRTCGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WebRTCGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forcepalette_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eqpotpalette_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  _internal_metadata_.Clear();
}

bool WebRTCGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebRTCGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WebRTCGameInfo.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string forcePalette = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forcepalette()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forcepalette().data(), static_cast<int>(this->forcepalette().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WebRTCGameInfo.forcePalette"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string eqPotPalette = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eqpotpalette()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->eqpotpalette().data(), static_cast<int>(this->eqpotpalette().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WebRTCGameInfo.eqPotPalette"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebRTCGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebRTCGameInfo)
  return false;
#undef DO_
}

void WebRTCGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebRTCGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // int32 gameid = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // string forcePalette = 3;
  if (this->forcepalette().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forcepalette().data(), static_cast<int>(this->forcepalette().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.forcePalette");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->forcepalette(), output);
  }

  // string eqPotPalette = 4;
  if (this->eqpotpalette().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eqpotpalette().data(), static_cast<int>(this->eqpotpalette().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.eqPotPalette");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->eqpotpalette(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WebRTCGameInfo)
}

::google::protobuf::uint8* WebRTCGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebRTCGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // int32 gameid = 2;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // string forcePalette = 3;
  if (this->forcepalette().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forcepalette().data(), static_cast<int>(this->forcepalette().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.forcePalette");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->forcepalette(), target);
  }

  // string eqPotPalette = 4;
  if (this->eqpotpalette().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eqpotpalette().data(), static_cast<int>(this->eqpotpalette().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WebRTCGameInfo.eqPotPalette");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eqpotpalette(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebRTCGameInfo)
  return target;
}

size_t WebRTCGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebRTCGameInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string forcePalette = 3;
  if (this->forcepalette().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forcepalette());
  }

  // string eqPotPalette = 4;
  if (this->eqpotpalette().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->eqpotpalette());
  }

  // int32 gameid = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRTCGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebRTCGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WebRTCGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WebRTCGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebRTCGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebRTCGameInfo)
    MergeFrom(*source);
  }
}

void WebRTCGameInfo::MergeFrom(const WebRTCGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebRTCGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.forcepalette().size() > 0) {

    forcepalette_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forcepalette_);
  }
  if (from.eqpotpalette().size() > 0) {

    eqpotpalette_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eqpotpalette_);
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void WebRTCGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebRTCGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebRTCGameInfo::CopyFrom(const WebRTCGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebRTCGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRTCGameInfo::IsInitialized() const {
  return true;
}

void WebRTCGameInfo::Swap(WebRTCGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebRTCGameInfo::InternalSwap(WebRTCGameInfo* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  forcepalette_.Swap(&other->forcepalette_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eqpotpalette_.Swap(&other->eqpotpalette_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WebRTCGameInfo::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WebRTCAdminToClientMessage::InitAsDefaultInstance() {
  ::_WebRTCAdminToClientMessage_default_instance_.rtcgameinfo_ = const_cast< ::WebRTCGameInfo*>(
      ::WebRTCGameInfo::internal_default_instance());
}
void WebRTCAdminToClientMessage::set_allocated_rtcgameinfo(::WebRTCGameInfo* rtcgameinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcgameinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcgameinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcgameinfo, submessage_arena);
    }
    set_has_rtcgameinfo();
    message_.rtcgameinfo_ = rtcgameinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:WebRTCAdminToClientMessage.rtcGameInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WebRTCAdminToClientMessage::kRtcGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WebRTCAdminToClientMessage::WebRTCAdminToClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_WebRTCAdminToClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebRTCAdminToClientMessage)
}
WebRTCAdminToClientMessage::WebRTCAdminToClientMessage(const WebRTCAdminToClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRtcGameInfo: {
      mutable_rtcgameinfo()->::WebRTCGameInfo::MergeFrom(from.rtcgameinfo());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WebRTCAdminToClientMessage)
}

void WebRTCAdminToClientMessage::SharedCtor() {
  clear_has_message();
}

WebRTCAdminToClientMessage::~WebRTCAdminToClientMessage() {
  // @@protoc_insertion_point(destructor:WebRTCAdminToClientMessage)
  SharedDtor();
}

void WebRTCAdminToClientMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void WebRTCAdminToClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WebRTCAdminToClientMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WebRTCAdminToClientMessage& WebRTCAdminToClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_WebRTCAdminToClientMessage.base);
  return *internal_default_instance();
}


void WebRTCAdminToClientMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:WebRTCAdminToClientMessage)
  switch (message_case()) {
    case kRtcGameInfo: {
      delete message_.rtcgameinfo_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void WebRTCAdminToClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WebRTCAdminToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool WebRTCAdminToClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebRTCAdminToClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .WebRTCGameInfo rtcGameInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcgameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebRTCAdminToClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebRTCAdminToClientMessage)
  return false;
#undef DO_
}

void WebRTCAdminToClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebRTCAdminToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WebRTCGameInfo rtcGameInfo = 1;
  if (has_rtcgameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_rtcgameinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WebRTCAdminToClientMessage)
}

::google::protobuf::uint8* WebRTCAdminToClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebRTCAdminToClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WebRTCGameInfo rtcGameInfo = 1;
  if (has_rtcgameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_rtcgameinfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebRTCAdminToClientMessage)
  return target;
}

size_t WebRTCAdminToClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebRTCAdminToClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .WebRTCGameInfo rtcGameInfo = 1;
    case kRtcGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcgameinfo_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRTCAdminToClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebRTCAdminToClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WebRTCAdminToClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WebRTCAdminToClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebRTCAdminToClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebRTCAdminToClientMessage)
    MergeFrom(*source);
  }
}

void WebRTCAdminToClientMessage::MergeFrom(const WebRTCAdminToClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebRTCAdminToClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRtcGameInfo: {
      mutable_rtcgameinfo()->::WebRTCGameInfo::MergeFrom(from.rtcgameinfo());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void WebRTCAdminToClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebRTCAdminToClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebRTCAdminToClientMessage::CopyFrom(const WebRTCAdminToClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebRTCAdminToClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRTCAdminToClientMessage::IsInitialized() const {
  return true;
}

void WebRTCAdminToClientMessage::Swap(WebRTCAdminToClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WebRTCAdminToClientMessage::InternalSwap(WebRTCAdminToClientMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WebRTCAdminToClientMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomWrappedMessage::InitAsDefaultInstance() {
  ::_RoomWrappedMessage_default_instance_.roominfo_ = const_cast< ::RoomInfo*>(
      ::RoomInfo::internal_default_instance());
  ::_RoomWrappedMessage_default_instance_.responceinvitation_ = const_cast< ::ResponceOnGameInvitation*>(
      ::ResponceOnGameInvitation::internal_default_instance());
  ::_RoomWrappedMessage_default_instance_.responceview_ = const_cast< ::ResponceOnGameView*>(
      ::ResponceOnGameView::internal_default_instance());
  ::_RoomWrappedMessage_default_instance_.startgame_ = const_cast< ::StartGame*>(
      ::StartGame::internal_default_instance());
}
void RoomWrappedMessage::set_allocated_roominfo(::RoomInfo* roominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (roominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    set_has_roominfo();
    message_.roominfo_ = roominfo;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedMessage.roomInfo)
}
void RoomWrappedMessage::set_allocated_responceinvitation(::ResponceOnGameInvitation* responceinvitation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (responceinvitation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      responceinvitation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responceinvitation, submessage_arena);
    }
    set_has_responceinvitation();
    message_.responceinvitation_ = responceinvitation;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedMessage.responceInvitation)
}
void RoomWrappedMessage::set_allocated_responceview(::ResponceOnGameView* responceview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (responceview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      responceview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responceview, submessage_arena);
    }
    set_has_responceview();
    message_.responceview_ = responceview;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedMessage.responceView)
}
void RoomWrappedMessage::set_allocated_startgame(::StartGame* startgame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (startgame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startgame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startgame, submessage_arena);
    }
    set_has_startgame();
    message_.startgame_ = startgame;
  }
  // @@protoc_insertion_point(field_set_allocated:RoomWrappedMessage.startGame)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomWrappedMessage::kRoomInfoFieldNumber;
const int RoomWrappedMessage::kResponceInvitationFieldNumber;
const int RoomWrappedMessage::kResponceViewFieldNumber;
const int RoomWrappedMessage::kStartGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomWrappedMessage::RoomWrappedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_RoomWrappedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomWrappedMessage)
}
RoomWrappedMessage::RoomWrappedMessage(const RoomWrappedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRoomInfo: {
      mutable_roominfo()->::RoomInfo::MergeFrom(from.roominfo());
      break;
    }
    case kResponceInvitation: {
      mutable_responceinvitation()->::ResponceOnGameInvitation::MergeFrom(from.responceinvitation());
      break;
    }
    case kResponceView: {
      mutable_responceview()->::ResponceOnGameView::MergeFrom(from.responceview());
      break;
    }
    case kStartGame: {
      mutable_startgame()->::StartGame::MergeFrom(from.startgame());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RoomWrappedMessage)
}

void RoomWrappedMessage::SharedCtor() {
  clear_has_message();
}

RoomWrappedMessage::~RoomWrappedMessage() {
  // @@protoc_insertion_point(destructor:RoomWrappedMessage)
  SharedDtor();
}

void RoomWrappedMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void RoomWrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomWrappedMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomWrappedMessage& RoomWrappedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_RoomWrappedMessage.base);
  return *internal_default_instance();
}


void RoomWrappedMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:RoomWrappedMessage)
  switch (message_case()) {
    case kRoomInfo: {
      delete message_.roominfo_;
      break;
    }
    case kResponceInvitation: {
      delete message_.responceinvitation_;
      break;
    }
    case kResponceView: {
      delete message_.responceview_;
      break;
    }
    case kStartGame: {
      delete message_.startgame_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void RoomWrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool RoomWrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomWrappedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RoomInfo roomInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ResponceOnGameInvitation responceInvitation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_responceinvitation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ResponceOnGameView responceView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_responceview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StartGame startGame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startgame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomWrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomWrappedMessage)
  return false;
#undef DO_
}

void RoomWrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoomInfo roomInfo = 1;
  if (has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_roominfo(), output);
  }

  // .ResponceOnGameInvitation responceInvitation = 2;
  if (has_responceinvitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_responceinvitation(), output);
  }

  // .ResponceOnGameView responceView = 3;
  if (has_responceview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_responceview(), output);
  }

  // .StartGame startGame = 4;
  if (has_startgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_startgame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomWrappedMessage)
}

::google::protobuf::uint8* RoomWrappedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RoomWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoomInfo roomInfo = 1;
  if (has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_roominfo(), deterministic, target);
  }

  // .ResponceOnGameInvitation responceInvitation = 2;
  if (has_responceinvitation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_responceinvitation(), deterministic, target);
  }

  // .ResponceOnGameView responceView = 3;
  if (has_responceview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_responceview(), deterministic, target);
  }

  // .StartGame startGame = 4;
  if (has_startgame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_startgame(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomWrappedMessage)
  return target;
}

size_t RoomWrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomWrappedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .RoomInfo roomInfo = 1;
    case kRoomInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.roominfo_);
      break;
    }
    // .ResponceOnGameInvitation responceInvitation = 2;
    case kResponceInvitation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.responceinvitation_);
      break;
    }
    // .ResponceOnGameView responceView = 3;
    case kResponceView: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.responceview_);
      break;
    }
    // .StartGame startGame = 4;
    case kStartGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.startgame_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomWrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomWrappedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomWrappedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomWrappedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomWrappedMessage)
    MergeFrom(*source);
  }
}

void RoomWrappedMessage::MergeFrom(const RoomWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRoomInfo: {
      mutable_roominfo()->::RoomInfo::MergeFrom(from.roominfo());
      break;
    }
    case kResponceInvitation: {
      mutable_responceinvitation()->::ResponceOnGameInvitation::MergeFrom(from.responceinvitation());
      break;
    }
    case kResponceView: {
      mutable_responceview()->::ResponceOnGameView::MergeFrom(from.responceview());
      break;
    }
    case kStartGame: {
      mutable_startgame()->::StartGame::MergeFrom(from.startgame());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void RoomWrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomWrappedMessage::CopyFrom(const RoomWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomWrappedMessage::IsInitialized() const {
  return true;
}

void RoomWrappedMessage::Swap(RoomWrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomWrappedMessage::InternalSwap(RoomWrappedMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomWrappedMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InvitationToPlayGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationToPlayGame::kClientPortFieldNumber;
const int InvitationToPlayGame::kClientIpFieldNumber;
const int InvitationToPlayGame::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationToPlayGame::InvitationToPlayGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToPlayGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InvitationToPlayGame)
}
InvitationToPlayGame::InvitationToPlayGame(const InvitationToPlayGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientip().size() > 0) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  ::memcpy(&clientport_, &from.clientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:InvitationToPlayGame)
}

void InvitationToPlayGame::SharedCtor() {
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
}

InvitationToPlayGame::~InvitationToPlayGame() {
  // @@protoc_insertion_point(destructor:InvitationToPlayGame)
  SharedDtor();
}

void InvitationToPlayGame::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InvitationToPlayGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InvitationToPlayGame::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationToPlayGame& InvitationToPlayGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_InvitationToPlayGame.base);
  return *internal_default_instance();
}


void InvitationToPlayGame::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitationToPlayGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
  _internal_metadata_.Clear();
}

bool InvitationToPlayGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InvitationToPlayGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 clientPort = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientIp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientip().data(), static_cast<int>(this->clientip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InvitationToPlayGame.clientIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InvitationToPlayGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InvitationToPlayGame)
  return false;
#undef DO_
}

void InvitationToPlayGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InvitationToPlayGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientport(), output);
  }

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InvitationToPlayGame.clientIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientip(), output);
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:InvitationToPlayGame)
}

::google::protobuf::uint8* InvitationToPlayGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InvitationToPlayGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientport(), target);
  }

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InvitationToPlayGame.clientIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientip(), target);
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InvitationToPlayGame)
  return target;
}

size_t InvitationToPlayGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvitationToPlayGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientport());
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationToPlayGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InvitationToPlayGame)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationToPlayGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationToPlayGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InvitationToPlayGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InvitationToPlayGame)
    MergeFrom(*source);
  }
}

void InvitationToPlayGame::MergeFrom(const InvitationToPlayGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvitationToPlayGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.clientport() != 0) {
    set_clientport(from.clientport());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void InvitationToPlayGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InvitationToPlayGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationToPlayGame::CopyFrom(const InvitationToPlayGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitationToPlayGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationToPlayGame::IsInitialized() const {
  return true;
}

void InvitationToPlayGame::Swap(InvitationToPlayGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationToPlayGame::InternalSwap(InvitationToPlayGame* other) {
  using std::swap;
  clientip_.Swap(&other->clientip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientport_, other->clientport_);
  swap(ticket_, other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InvitationToPlayGame::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InvitationToViewGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationToViewGame::kClientPortFieldNumber;
const int InvitationToViewGame::kClientIpFieldNumber;
const int InvitationToViewGame::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationToViewGame::InvitationToViewGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_InvitationToViewGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InvitationToViewGame)
}
InvitationToViewGame::InvitationToViewGame(const InvitationToViewGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientip().size() > 0) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  ::memcpy(&clientport_, &from.clientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:InvitationToViewGame)
}

void InvitationToViewGame::SharedCtor() {
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
}

InvitationToViewGame::~InvitationToViewGame() {
  // @@protoc_insertion_point(destructor:InvitationToViewGame)
  SharedDtor();
}

void InvitationToViewGame::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InvitationToViewGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InvitationToViewGame::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationToViewGame& InvitationToViewGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_InvitationToViewGame.base);
  return *internal_default_instance();
}


void InvitationToViewGame::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitationToViewGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(ticket_));
  _internal_metadata_.Clear();
}

bool InvitationToViewGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InvitationToViewGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 clientPort = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientIp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientip().data(), static_cast<int>(this->clientip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InvitationToViewGame.clientIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InvitationToViewGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InvitationToViewGame)
  return false;
#undef DO_
}

void InvitationToViewGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InvitationToViewGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientport(), output);
  }

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InvitationToViewGame.clientIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientip(), output);
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ticket(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:InvitationToViewGame)
}

::google::protobuf::uint8* InvitationToViewGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InvitationToViewGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientport(), target);
  }

  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InvitationToViewGame.clientIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientip(), target);
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ticket(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InvitationToViewGame)
  return target;
}

size_t InvitationToViewGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvitationToViewGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string clientIp = 2;
  if (this->clientip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  // int32 clientPort = 1;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientport());
  }

  // int32 ticket = 3;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationToViewGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InvitationToViewGame)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationToViewGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationToViewGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InvitationToViewGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InvitationToViewGame)
    MergeFrom(*source);
  }
}

void InvitationToViewGame::MergeFrom(const InvitationToViewGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvitationToViewGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientip().size() > 0) {

    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  if (from.clientport() != 0) {
    set_clientport(from.clientport());
  }
  if (from.ticket() != 0) {
    set_ticket(from.ticket());
  }
}

void InvitationToViewGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InvitationToViewGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationToViewGame::CopyFrom(const InvitationToViewGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitationToViewGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationToViewGame::IsInitialized() const {
  return true;
}

void InvitationToViewGame::Swap(InvitationToViewGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationToViewGame::InternalSwap(InvitationToViewGame* other) {
  using std::swap;
  clientip_.Swap(&other->clientip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientport_, other->clientport_);
  swap(ticket_, other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InvitationToViewGame::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListenerToClientGamesStates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenerToClientGamesStates::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenerToClientGamesStates::ListenerToClientGamesStates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientGamesStates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListenerToClientGamesStates)
}
ListenerToClientGamesStates::ListenerToClientGamesStates(const ListenerToClientGamesStates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gamestate_(from.gamestate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ListenerToClientGamesStates)
}

void ListenerToClientGamesStates::SharedCtor() {
}

ListenerToClientGamesStates::~ListenerToClientGamesStates() {
  // @@protoc_insertion_point(destructor:ListenerToClientGamesStates)
  SharedDtor();
}

void ListenerToClientGamesStates::SharedDtor() {
}

void ListenerToClientGamesStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListenerToClientGamesStates::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListenerToClientGamesStates& ListenerToClientGamesStates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ListenerToClientGamesStates.base);
  return *internal_default_instance();
}


void ListenerToClientGamesStates::Clear() {
// @@protoc_insertion_point(message_clear_start:ListenerToClientGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamestate_.Clear();
  _internal_metadata_.Clear();
}

bool ListenerToClientGamesStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListenerToClientGamesStates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameState gameState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gamestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListenerToClientGamesStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListenerToClientGamesStates)
  return false;
#undef DO_
}

void ListenerToClientGamesStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListenerToClientGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameState gameState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamestate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gamestate(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ListenerToClientGamesStates)
}

::google::protobuf::uint8* ListenerToClientGamesStates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListenerToClientGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameState gameState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamestate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gamestate(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListenerToClientGamesStates)
  return target;
}

size_t ListenerToClientGamesStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListenerToClientGamesStates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GameState gameState = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gamestate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gamestate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenerToClientGamesStates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListenerToClientGamesStates)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenerToClientGamesStates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListenerToClientGamesStates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListenerToClientGamesStates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListenerToClientGamesStates)
    MergeFrom(*source);
  }
}

void ListenerToClientGamesStates::MergeFrom(const ListenerToClientGamesStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListenerToClientGamesStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamestate_.MergeFrom(from.gamestate_);
}

void ListenerToClientGamesStates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListenerToClientGamesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenerToClientGamesStates::CopyFrom(const ListenerToClientGamesStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListenerToClientGamesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenerToClientGamesStates::IsInitialized() const {
  return true;
}

void ListenerToClientGamesStates::Swap(ListenerToClientGamesStates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenerToClientGamesStates::InternalSwap(ListenerToClientGamesStates* other) {
  using std::swap;
  CastToBase(&gamestate_)->InternalSwap(CastToBase(&other->gamestate_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListenerToClientGamesStates::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rtcGameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtcGameState::kGameRTCIDFieldNumber;
const int rtcGameState::kGameNameFieldNumber;
const int rtcGameState::kRoomSizeFieldNumber;
const int rtcGameState::kCurrentPlayersCountFieldNumber;
const int rtcGameState::kPlayerStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtcGameState::rtcGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_rtcGameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rtcGameState)
}
rtcGameState::rtcGameState(const rtcGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamename().size() > 0) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  ::memcpy(&gamertcid_, &from.gamertcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerstatus_) -
    reinterpret_cast<char*>(&gamertcid_)) + sizeof(playerstatus_));
  // @@protoc_insertion_point(copy_constructor:rtcGameState)
}

void rtcGameState::SharedCtor() {
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gamertcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerstatus_) -
      reinterpret_cast<char*>(&gamertcid_)) + sizeof(playerstatus_));
}

rtcGameState::~rtcGameState() {
  // @@protoc_insertion_point(destructor:rtcGameState)
  SharedDtor();
}

void rtcGameState::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rtcGameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rtcGameState::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtcGameState& rtcGameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_rtcGameState.base);
  return *internal_default_instance();
}


void rtcGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:rtcGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gamertcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerstatus_) -
      reinterpret_cast<char*>(&gamertcid_)) + sizeof(playerstatus_));
  _internal_metadata_.Clear();
}

bool rtcGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rtcGameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gameRTCID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamertcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamename().data(), static_cast<int>(this->gamename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rtcGameState.gameName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roomSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentPlayersCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentplayerscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .WebRTCPlayerStatus playerStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_playerstatus(static_cast< ::WebRTCPlayerStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rtcGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rtcGameState)
  return false;
#undef DO_
}

void rtcGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rtcGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamertcid(), output);
  }

  // string gameName = 2;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rtcGameState.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamename(), output);
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomsize(), output);
  }

  // int32 currentPlayersCount = 4;
  if (this->currentplayerscount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentplayerscount(), output);
  }

  // .WebRTCPlayerStatus playerStatus = 5;
  if (this->playerstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->playerstatus(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rtcGameState)
}

::google::protobuf::uint8* rtcGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rtcGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamertcid(), target);
  }

  // string gameName = 2;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rtcGameState.gameName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamename(), target);
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomsize(), target);
  }

  // int32 currentPlayersCount = 4;
  if (this->currentplayerscount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentplayerscount(), target);
  }

  // .WebRTCPlayerStatus playerStatus = 5;
  if (this->playerstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->playerstatus(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtcGameState)
  return target;
}

size_t rtcGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtcGameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gameName = 2;
  if (this->gamename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamertcid());
  }

  // int32 roomSize = 3;
  if (this->roomsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomsize());
  }

  // int32 currentPlayersCount = 4;
  if (this->currentplayerscount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentplayerscount());
  }

  // .WebRTCPlayerStatus playerStatus = 5;
  if (this->playerstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rtcGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rtcGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const rtcGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtcGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rtcGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rtcGameState)
    MergeFrom(*source);
  }
}

void rtcGameState::MergeFrom(const rtcGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rtcGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamename().size() > 0) {

    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  if (from.gamertcid() != 0) {
    set_gamertcid(from.gamertcid());
  }
  if (from.roomsize() != 0) {
    set_roomsize(from.roomsize());
  }
  if (from.currentplayerscount() != 0) {
    set_currentplayerscount(from.currentplayerscount());
  }
  if (from.playerstatus() != 0) {
    set_playerstatus(from.playerstatus());
  }
}

void rtcGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rtcGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtcGameState::CopyFrom(const rtcGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtcGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtcGameState::IsInitialized() const {
  return true;
}

void rtcGameState::Swap(rtcGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtcGameState::InternalSwap(rtcGameState* other) {
  using std::swap;
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamertcid_, other->gamertcid_);
  swap(roomsize_, other->roomsize_);
  swap(currentplayerscount_, other->currentplayerscount_);
  swap(playerstatus_, other->playerstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rtcGameState::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListenerToClientsWebRTCGamesStates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenerToClientsWebRTCGamesStates::kRtcStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenerToClientsWebRTCGamesStates::ListenerToClientsWebRTCGamesStates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCGamesStates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListenerToClientsWebRTCGamesStates)
}
ListenerToClientsWebRTCGamesStates::ListenerToClientsWebRTCGamesStates(const ListenerToClientsWebRTCGamesStates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rtcstate_(from.rtcstate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ListenerToClientsWebRTCGamesStates)
}

void ListenerToClientsWebRTCGamesStates::SharedCtor() {
}

ListenerToClientsWebRTCGamesStates::~ListenerToClientsWebRTCGamesStates() {
  // @@protoc_insertion_point(destructor:ListenerToClientsWebRTCGamesStates)
  SharedDtor();
}

void ListenerToClientsWebRTCGamesStates::SharedDtor() {
}

void ListenerToClientsWebRTCGamesStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListenerToClientsWebRTCGamesStates::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListenerToClientsWebRTCGamesStates& ListenerToClientsWebRTCGamesStates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCGamesStates.base);
  return *internal_default_instance();
}


void ListenerToClientsWebRTCGamesStates::Clear() {
// @@protoc_insertion_point(message_clear_start:ListenerToClientsWebRTCGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtcstate_.Clear();
  _internal_metadata_.Clear();
}

bool ListenerToClientsWebRTCGamesStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListenerToClientsWebRTCGamesStates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rtcGameState rtcState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rtcstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListenerToClientsWebRTCGamesStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListenerToClientsWebRTCGamesStates)
  return false;
#undef DO_
}

void ListenerToClientsWebRTCGamesStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListenerToClientsWebRTCGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rtcGameState rtcState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtcstate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rtcstate(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ListenerToClientsWebRTCGamesStates)
}

::google::protobuf::uint8* ListenerToClientsWebRTCGamesStates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListenerToClientsWebRTCGamesStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rtcGameState rtcState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtcstate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rtcstate(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListenerToClientsWebRTCGamesStates)
  return target;
}

size_t ListenerToClientsWebRTCGamesStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListenerToClientsWebRTCGamesStates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .rtcGameState rtcState = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rtcstate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rtcstate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenerToClientsWebRTCGamesStates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListenerToClientsWebRTCGamesStates)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenerToClientsWebRTCGamesStates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListenerToClientsWebRTCGamesStates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListenerToClientsWebRTCGamesStates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListenerToClientsWebRTCGamesStates)
    MergeFrom(*source);
  }
}

void ListenerToClientsWebRTCGamesStates::MergeFrom(const ListenerToClientsWebRTCGamesStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListenerToClientsWebRTCGamesStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtcstate_.MergeFrom(from.rtcstate_);
}

void ListenerToClientsWebRTCGamesStates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListenerToClientsWebRTCGamesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenerToClientsWebRTCGamesStates::CopyFrom(const ListenerToClientsWebRTCGamesStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListenerToClientsWebRTCGamesStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenerToClientsWebRTCGamesStates::IsInitialized() const {
  return true;
}

void ListenerToClientsWebRTCGamesStates::Swap(ListenerToClientsWebRTCGamesStates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenerToClientsWebRTCGamesStates::InternalSwap(ListenerToClientsWebRTCGamesStates* other) {
  using std::swap;
  CastToBase(&rtcstate_)->InternalSwap(CastToBase(&other->rtcstate_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListenerToClientsWebRTCGamesStates::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListenerToClientsWebRTCRefuse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenerToClientsWebRTCRefuse::kGameRTCIDFieldNumber;
const int ListenerToClientsWebRTCRefuse::kRefuseReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenerToClientsWebRTCRefuse::ListenerToClientsWebRTCRefuse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCRefuse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListenerToClientsWebRTCRefuse)
}
ListenerToClientsWebRTCRefuse::ListenerToClientsWebRTCRefuse(const ListenerToClientsWebRTCRefuse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gamertcid_, &from.gamertcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&refusereason_) -
    reinterpret_cast<char*>(&gamertcid_)) + sizeof(refusereason_));
  // @@protoc_insertion_point(copy_constructor:ListenerToClientsWebRTCRefuse)
}

void ListenerToClientsWebRTCRefuse::SharedCtor() {
  ::memset(&gamertcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refusereason_) -
      reinterpret_cast<char*>(&gamertcid_)) + sizeof(refusereason_));
}

ListenerToClientsWebRTCRefuse::~ListenerToClientsWebRTCRefuse() {
  // @@protoc_insertion_point(destructor:ListenerToClientsWebRTCRefuse)
  SharedDtor();
}

void ListenerToClientsWebRTCRefuse::SharedDtor() {
}

void ListenerToClientsWebRTCRefuse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListenerToClientsWebRTCRefuse::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListenerToClientsWebRTCRefuse& ListenerToClientsWebRTCRefuse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ListenerToClientsWebRTCRefuse.base);
  return *internal_default_instance();
}


void ListenerToClientsWebRTCRefuse::Clear() {
// @@protoc_insertion_point(message_clear_start:ListenerToClientsWebRTCRefuse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gamertcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refusereason_) -
      reinterpret_cast<char*>(&gamertcid_)) + sizeof(refusereason_));
  _internal_metadata_.Clear();
}

bool ListenerToClientsWebRTCRefuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListenerToClientsWebRTCRefuse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gameRTCID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamertcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .WebRTCGameRefuseReasons refuseReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_refusereason(static_cast< ::WebRTCGameRefuseReasons >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListenerToClientsWebRTCRefuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListenerToClientsWebRTCRefuse)
  return false;
#undef DO_
}

void ListenerToClientsWebRTCRefuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListenerToClientsWebRTCRefuse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamertcid(), output);
  }

  // .WebRTCGameRefuseReasons refuseReason = 2;
  if (this->refusereason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->refusereason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ListenerToClientsWebRTCRefuse)
}

::google::protobuf::uint8* ListenerToClientsWebRTCRefuse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListenerToClientsWebRTCRefuse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamertcid(), target);
  }

  // .WebRTCGameRefuseReasons refuseReason = 2;
  if (this->refusereason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->refusereason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListenerToClientsWebRTCRefuse)
  return target;
}

size_t ListenerToClientsWebRTCRefuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListenerToClientsWebRTCRefuse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 gameRTCID = 1;
  if (this->gamertcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamertcid());
  }

  // .WebRTCGameRefuseReasons refuseReason = 2;
  if (this->refusereason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->refusereason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenerToClientsWebRTCRefuse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListenerToClientsWebRTCRefuse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenerToClientsWebRTCRefuse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListenerToClientsWebRTCRefuse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListenerToClientsWebRTCRefuse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListenerToClientsWebRTCRefuse)
    MergeFrom(*source);
  }
}

void ListenerToClientsWebRTCRefuse::MergeFrom(const ListenerToClientsWebRTCRefuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListenerToClientsWebRTCRefuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamertcid() != 0) {
    set_gamertcid(from.gamertcid());
  }
  if (from.refusereason() != 0) {
    set_refusereason(from.refusereason());
  }
}

void ListenerToClientsWebRTCRefuse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListenerToClientsWebRTCRefuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenerToClientsWebRTCRefuse::CopyFrom(const ListenerToClientsWebRTCRefuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListenerToClientsWebRTCRefuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenerToClientsWebRTCRefuse::IsInitialized() const {
  return true;
}

void ListenerToClientsWebRTCRefuse::Swap(ListenerToClientsWebRTCRefuse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenerToClientsWebRTCRefuse::InternalSwap(ListenerToClientsWebRTCRefuse* other) {
  using std::swap;
  swap(gamertcid_, other->gamertcid_);
  swap(refusereason_, other->refusereason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListenerToClientsWebRTCRefuse::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListenerToClientWrappedMessage::InitAsDefaultInstance() {
  ::_ListenerToClientWrappedMessage_default_instance_.invitationtoplay_ = const_cast< ::InvitationToPlayGame*>(
      ::InvitationToPlayGame::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.states_ = const_cast< ::ListenerToClientGamesStates*>(
      ::ListenerToClientGamesStates::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.invitationtoview_ = const_cast< ::InvitationToViewGame*>(
      ::InvitationToViewGame::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.rtcstates_ = const_cast< ::ListenerToClientsWebRTCGamesStates*>(
      ::ListenerToClientsWebRTCGamesStates::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.rtcrefuse_ = const_cast< ::ListenerToClientsWebRTCRefuse*>(
      ::ListenerToClientsWebRTCRefuse::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.rtcoffer_ = const_cast< ::RTCAdmin2ClientOffer*>(
      ::RTCAdmin2ClientOffer::internal_default_instance());
  ::_ListenerToClientWrappedMessage_default_instance_.rtcanswer_ = const_cast< ::RTCClient2AdminAnswer*>(
      ::RTCClient2AdminAnswer::internal_default_instance());
}
void ListenerToClientWrappedMessage::set_allocated_invitationtoplay(::InvitationToPlayGame* invitationtoplay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (invitationtoplay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invitationtoplay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitationtoplay, submessage_arena);
    }
    set_has_invitationtoplay();
    message_.invitationtoplay_ = invitationtoplay;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.invitationToPlay)
}
void ListenerToClientWrappedMessage::set_allocated_states(::ListenerToClientGamesStates* states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (states) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, states, submessage_arena);
    }
    set_has_states();
    message_.states_ = states;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.states)
}
void ListenerToClientWrappedMessage::set_allocated_invitationtoview(::InvitationToViewGame* invitationtoview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (invitationtoview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invitationtoview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitationtoview, submessage_arena);
    }
    set_has_invitationtoview();
    message_.invitationtoview_ = invitationtoview;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.invitationToView)
}
void ListenerToClientWrappedMessage::set_allocated_rtcstates(::ListenerToClientsWebRTCGamesStates* rtcstates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcstates) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcstates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcstates, submessage_arena);
    }
    set_has_rtcstates();
    message_.rtcstates_ = rtcstates;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.rtcStates)
}
void ListenerToClientWrappedMessage::set_allocated_rtcrefuse(::ListenerToClientsWebRTCRefuse* rtcrefuse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcrefuse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcrefuse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcrefuse, submessage_arena);
    }
    set_has_rtcrefuse();
    message_.rtcrefuse_ = rtcrefuse;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.rtcRefuse)
}
void ListenerToClientWrappedMessage::set_allocated_rtcoffer(::RTCAdmin2ClientOffer* rtcoffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcoffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcoffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcoffer, submessage_arena);
    }
    set_has_rtcoffer();
    message_.rtcoffer_ = rtcoffer;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.rtcOffer)
}
void ListenerToClientWrappedMessage::set_allocated_rtcanswer(::RTCClient2AdminAnswer* rtcanswer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (rtcanswer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcanswer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcanswer, submessage_arena);
    }
    set_has_rtcanswer();
    message_.rtcanswer_ = rtcanswer;
  }
  // @@protoc_insertion_point(field_set_allocated:ListenerToClientWrappedMessage.rtcAnswer)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenerToClientWrappedMessage::kInvitationToPlayFieldNumber;
const int ListenerToClientWrappedMessage::kStatesFieldNumber;
const int ListenerToClientWrappedMessage::kInvitationToViewFieldNumber;
const int ListenerToClientWrappedMessage::kRtcStatesFieldNumber;
const int ListenerToClientWrappedMessage::kRtcRefuseFieldNumber;
const int ListenerToClientWrappedMessage::kRtcOfferFieldNumber;
const int ListenerToClientWrappedMessage::kRtcAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenerToClientWrappedMessage::ListenerToClientWrappedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ListenerToClientWrappedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListenerToClientWrappedMessage)
}
ListenerToClientWrappedMessage::ListenerToClientWrappedMessage(const ListenerToClientWrappedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kInvitationToPlay: {
      mutable_invitationtoplay()->::InvitationToPlayGame::MergeFrom(from.invitationtoplay());
      break;
    }
    case kStates: {
      mutable_states()->::ListenerToClientGamesStates::MergeFrom(from.states());
      break;
    }
    case kInvitationToView: {
      mutable_invitationtoview()->::InvitationToViewGame::MergeFrom(from.invitationtoview());
      break;
    }
    case kRtcStates: {
      mutable_rtcstates()->::ListenerToClientsWebRTCGamesStates::MergeFrom(from.rtcstates());
      break;
    }
    case kRtcRefuse: {
      mutable_rtcrefuse()->::ListenerToClientsWebRTCRefuse::MergeFrom(from.rtcrefuse());
      break;
    }
    case kRtcOffer: {
      mutable_rtcoffer()->::RTCAdmin2ClientOffer::MergeFrom(from.rtcoffer());
      break;
    }
    case kRtcAnswer: {
      mutable_rtcanswer()->::RTCClient2AdminAnswer::MergeFrom(from.rtcanswer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ListenerToClientWrappedMessage)
}

void ListenerToClientWrappedMessage::SharedCtor() {
  clear_has_message();
}

ListenerToClientWrappedMessage::~ListenerToClientWrappedMessage() {
  // @@protoc_insertion_point(destructor:ListenerToClientWrappedMessage)
  SharedDtor();
}

void ListenerToClientWrappedMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void ListenerToClientWrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListenerToClientWrappedMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListenerToClientWrappedMessage& ListenerToClientWrappedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ListenerToClientWrappedMessage.base);
  return *internal_default_instance();
}


void ListenerToClientWrappedMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ListenerToClientWrappedMessage)
  switch (message_case()) {
    case kInvitationToPlay: {
      delete message_.invitationtoplay_;
      break;
    }
    case kStates: {
      delete message_.states_;
      break;
    }
    case kInvitationToView: {
      delete message_.invitationtoview_;
      break;
    }
    case kRtcStates: {
      delete message_.rtcstates_;
      break;
    }
    case kRtcRefuse: {
      delete message_.rtcrefuse_;
      break;
    }
    case kRtcOffer: {
      delete message_.rtcoffer_;
      break;
    }
    case kRtcAnswer: {
      delete message_.rtcanswer_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ListenerToClientWrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ListenerToClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool ListenerToClientWrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListenerToClientWrappedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .InvitationToPlayGame invitationToPlay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitationtoplay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ListenerToClientGamesStates states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InvitationToViewGame invitationToView = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitationtoview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ListenerToClientsWebRTCGamesStates rtcStates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcstates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ListenerToClientsWebRTCRefuse rtcRefuse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcrefuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCAdmin2ClientOffer rtcOffer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcoffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RTCClient2AdminAnswer rtcAnswer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtcanswer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListenerToClientWrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListenerToClientWrappedMessage)
  return false;
#undef DO_
}

void ListenerToClientWrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListenerToClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InvitationToPlayGame invitationToPlay = 1;
  if (has_invitationtoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_invitationtoplay(), output);
  }

  // .ListenerToClientGamesStates states = 2;
  if (has_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_states(), output);
  }

  // .InvitationToViewGame invitationToView = 3;
  if (has_invitationtoview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_invitationtoview(), output);
  }

  // .ListenerToClientsWebRTCGamesStates rtcStates = 4;
  if (has_rtcstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rtcstates(), output);
  }

  // .ListenerToClientsWebRTCRefuse rtcRefuse = 5;
  if (has_rtcrefuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_rtcrefuse(), output);
  }

  // .RTCAdmin2ClientOffer rtcOffer = 6;
  if (has_rtcoffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_rtcoffer(), output);
  }

  // .RTCClient2AdminAnswer rtcAnswer = 7;
  if (has_rtcanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_rtcanswer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ListenerToClientWrappedMessage)
}

::google::protobuf::uint8* ListenerToClientWrappedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListenerToClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InvitationToPlayGame invitationToPlay = 1;
  if (has_invitationtoplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_invitationtoplay(), deterministic, target);
  }

  // .ListenerToClientGamesStates states = 2;
  if (has_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_states(), deterministic, target);
  }

  // .InvitationToViewGame invitationToView = 3;
  if (has_invitationtoview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_invitationtoview(), deterministic, target);
  }

  // .ListenerToClientsWebRTCGamesStates rtcStates = 4;
  if (has_rtcstates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rtcstates(), deterministic, target);
  }

  // .ListenerToClientsWebRTCRefuse rtcRefuse = 5;
  if (has_rtcrefuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_rtcrefuse(), deterministic, target);
  }

  // .RTCAdmin2ClientOffer rtcOffer = 6;
  if (has_rtcoffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_rtcoffer(), deterministic, target);
  }

  // .RTCClient2AdminAnswer rtcAnswer = 7;
  if (has_rtcanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_rtcanswer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListenerToClientWrappedMessage)
  return target;
}

size_t ListenerToClientWrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListenerToClientWrappedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .InvitationToPlayGame invitationToPlay = 1;
    case kInvitationToPlay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.invitationtoplay_);
      break;
    }
    // .ListenerToClientGamesStates states = 2;
    case kStates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.states_);
      break;
    }
    // .InvitationToViewGame invitationToView = 3;
    case kInvitationToView: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.invitationtoview_);
      break;
    }
    // .ListenerToClientsWebRTCGamesStates rtcStates = 4;
    case kRtcStates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcstates_);
      break;
    }
    // .ListenerToClientsWebRTCRefuse rtcRefuse = 5;
    case kRtcRefuse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcrefuse_);
      break;
    }
    // .RTCAdmin2ClientOffer rtcOffer = 6;
    case kRtcOffer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcoffer_);
      break;
    }
    // .RTCClient2AdminAnswer rtcAnswer = 7;
    case kRtcAnswer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.rtcanswer_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenerToClientWrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListenerToClientWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenerToClientWrappedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListenerToClientWrappedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListenerToClientWrappedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListenerToClientWrappedMessage)
    MergeFrom(*source);
  }
}

void ListenerToClientWrappedMessage::MergeFrom(const ListenerToClientWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListenerToClientWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kInvitationToPlay: {
      mutable_invitationtoplay()->::InvitationToPlayGame::MergeFrom(from.invitationtoplay());
      break;
    }
    case kStates: {
      mutable_states()->::ListenerToClientGamesStates::MergeFrom(from.states());
      break;
    }
    case kInvitationToView: {
      mutable_invitationtoview()->::InvitationToViewGame::MergeFrom(from.invitationtoview());
      break;
    }
    case kRtcStates: {
      mutable_rtcstates()->::ListenerToClientsWebRTCGamesStates::MergeFrom(from.rtcstates());
      break;
    }
    case kRtcRefuse: {
      mutable_rtcrefuse()->::ListenerToClientsWebRTCRefuse::MergeFrom(from.rtcrefuse());
      break;
    }
    case kRtcOffer: {
      mutable_rtcoffer()->::RTCAdmin2ClientOffer::MergeFrom(from.rtcoffer());
      break;
    }
    case kRtcAnswer: {
      mutable_rtcanswer()->::RTCClient2AdminAnswer::MergeFrom(from.rtcanswer());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ListenerToClientWrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListenerToClientWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenerToClientWrappedMessage::CopyFrom(const ListenerToClientWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListenerToClientWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenerToClientWrappedMessage::IsInitialized() const {
  return true;
}

void ListenerToClientWrappedMessage::Swap(ListenerToClientWrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenerToClientWrappedMessage::InternalSwap(ListenerToClientWrappedMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListenerToClientWrappedMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerWrappedMessage::InitAsDefaultInstance() {
  ::_ServerWrappedMessage_default_instance_.invitationtoplay_ = const_cast< ::InvitationToPlayGame*>(
      ::InvitationToPlayGame::internal_default_instance());
  ::_ServerWrappedMessage_default_instance_.invitationtoview_ = const_cast< ::InvitationToViewGame*>(
      ::InvitationToViewGame::internal_default_instance());
}
void ServerWrappedMessage::set_allocated_invitationtoplay(::InvitationToPlayGame* invitationtoplay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (invitationtoplay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invitationtoplay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitationtoplay, submessage_arena);
    }
    set_has_invitationtoplay();
    message_.invitationtoplay_ = invitationtoplay;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerWrappedMessage.invitationToPlay)
}
void ServerWrappedMessage::set_allocated_invitationtoview(::InvitationToViewGame* invitationtoview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (invitationtoview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invitationtoview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitationtoview, submessage_arena);
    }
    set_has_invitationtoview();
    message_.invitationtoview_ = invitationtoview;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerWrappedMessage.invitationToView)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerWrappedMessage::kInvitationToPlayFieldNumber;
const int ServerWrappedMessage::kInvitationToViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerWrappedMessage::ServerWrappedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ServerWrappedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerWrappedMessage)
}
ServerWrappedMessage::ServerWrappedMessage(const ServerWrappedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kInvitationToPlay: {
      mutable_invitationtoplay()->::InvitationToPlayGame::MergeFrom(from.invitationtoplay());
      break;
    }
    case kInvitationToView: {
      mutable_invitationtoview()->::InvitationToViewGame::MergeFrom(from.invitationtoview());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerWrappedMessage)
}

void ServerWrappedMessage::SharedCtor() {
  clear_has_message();
}

ServerWrappedMessage::~ServerWrappedMessage() {
  // @@protoc_insertion_point(destructor:ServerWrappedMessage)
  SharedDtor();
}

void ServerWrappedMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void ServerWrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerWrappedMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerWrappedMessage& ServerWrappedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ServerWrappedMessage.base);
  return *internal_default_instance();
}


void ServerWrappedMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ServerWrappedMessage)
  switch (message_case()) {
    case kInvitationToPlay: {
      delete message_.invitationtoplay_;
      break;
    }
    case kInvitationToView: {
      delete message_.invitationtoview_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ServerWrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool ServerWrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerWrappedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .InvitationToPlayGame invitationToPlay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitationtoplay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InvitationToViewGame invitationToView = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitationtoview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerWrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerWrappedMessage)
  return false;
#undef DO_
}

void ServerWrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InvitationToPlayGame invitationToPlay = 1;
  if (has_invitationtoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_invitationtoplay(), output);
  }

  // .InvitationToViewGame invitationToView = 2;
  if (has_invitationtoview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_invitationtoview(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerWrappedMessage)
}

::google::protobuf::uint8* ServerWrappedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InvitationToPlayGame invitationToPlay = 1;
  if (has_invitationtoplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_invitationtoplay(), deterministic, target);
  }

  // .InvitationToViewGame invitationToView = 2;
  if (has_invitationtoview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_invitationtoview(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerWrappedMessage)
  return target;
}

size_t ServerWrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerWrappedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .InvitationToPlayGame invitationToPlay = 1;
    case kInvitationToPlay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.invitationtoplay_);
      break;
    }
    // .InvitationToViewGame invitationToView = 2;
    case kInvitationToView: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.invitationtoview_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerWrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerWrappedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerWrappedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerWrappedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerWrappedMessage)
    MergeFrom(*source);
  }
}

void ServerWrappedMessage::MergeFrom(const ServerWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kInvitationToPlay: {
      mutable_invitationtoplay()->::InvitationToPlayGame::MergeFrom(from.invitationtoplay());
      break;
    }
    case kInvitationToView: {
      mutable_invitationtoview()->::InvitationToViewGame::MergeFrom(from.invitationtoview());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ServerWrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerWrappedMessage::CopyFrom(const ServerWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerWrappedMessage::IsInitialized() const {
  return true;
}

void ServerWrappedMessage::Swap(ServerWrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerWrappedMessage::InternalSwap(ServerWrappedMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerWrappedMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyboardKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyboardKey::kKeyboardKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyboardKey::KeyboardKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_KeyboardKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeyboardKey)
}
KeyboardKey::KeyboardKey(const KeyboardKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyboardkey_ = from.keyboardkey_;
  // @@protoc_insertion_point(copy_constructor:KeyboardKey)
}

void KeyboardKey::SharedCtor() {
  keyboardkey_ = 0;
}

KeyboardKey::~KeyboardKey() {
  // @@protoc_insertion_point(destructor:KeyboardKey)
  SharedDtor();
}

void KeyboardKey::SharedDtor() {
}

void KeyboardKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyboardKey::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyboardKey& KeyboardKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_KeyboardKey.base);
  return *internal_default_instance();
}


void KeyboardKey::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyboardKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyboardkey_ = 0;
  _internal_metadata_.Clear();
}

bool KeyboardKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeyboardKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 keyboardKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keyboardkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeyboardKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeyboardKey)
  return false;
#undef DO_
}

void KeyboardKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeyboardKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keyboardKey = 1;
  if (this->keyboardkey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->keyboardkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KeyboardKey)
}

::google::protobuf::uint8* KeyboardKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KeyboardKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 keyboardKey = 1;
  if (this->keyboardkey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->keyboardkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyboardKey)
  return target;
}

size_t KeyboardKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyboardKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 keyboardKey = 1;
  if (this->keyboardkey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->keyboardkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeyboardKey)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyboardKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeyboardKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeyboardKey)
    MergeFrom(*source);
  }
}

void KeyboardKey::MergeFrom(const KeyboardKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeyboardKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keyboardkey() != 0) {
    set_keyboardkey(from.keyboardkey());
  }
}

void KeyboardKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeyboardKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardKey::CopyFrom(const KeyboardKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyboardKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardKey::IsInitialized() const {
  return true;
}

void KeyboardKey::Swap(KeyboardKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyboardKey::InternalSwap(KeyboardKey* other) {
  using std::swap;
  swap(keyboardkey_, other->keyboardkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyboardKey::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_Ping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}
Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_ = from.ping_;
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
  ping_ = 0;
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ping& Ping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_Ping.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_ = 0;
  _internal_metadata_.Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ping = 1;
  if (this->ping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ping = 1;
  if (this->ping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ping = 1;
  if (this->ping() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping() != 0) {
    set_ping(from.ping());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  using std::swap;
  swap(ping_, other->ping_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetQulon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetQulon::kQulonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetQulon::SetQulon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_SetQulon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetQulon)
}
SetQulon::SetQulon(const SetQulon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qulon_ = from.qulon_;
  // @@protoc_insertion_point(copy_constructor:SetQulon)
}

void SetQulon::SharedCtor() {
  qulon_ = 0;
}

SetQulon::~SetQulon() {
  // @@protoc_insertion_point(destructor:SetQulon)
  SharedDtor();
}

void SetQulon::SharedDtor() {
}

void SetQulon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetQulon::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetQulon& SetQulon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_SetQulon.base);
  return *internal_default_instance();
}


void SetQulon::Clear() {
// @@protoc_insertion_point(message_clear_start:SetQulon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qulon_ = 0;
  _internal_metadata_.Clear();
}

bool SetQulon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetQulon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float qulon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qulon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetQulon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetQulon)
  return false;
#undef DO_
}

void SetQulon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetQulon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float qulon = 1;
  if (this->qulon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->qulon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SetQulon)
}

::google::protobuf::uint8* SetQulon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetQulon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float qulon = 1;
  if (this->qulon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->qulon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetQulon)
  return target;
}

size_t SetQulon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetQulon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float qulon = 1;
  if (this->qulon() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetQulon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetQulon)
  GOOGLE_DCHECK_NE(&from, this);
  const SetQulon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetQulon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetQulon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetQulon)
    MergeFrom(*source);
  }
}

void SetQulon::MergeFrom(const SetQulon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetQulon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qulon() != 0) {
    set_qulon(from.qulon());
  }
}

void SetQulon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetQulon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQulon::CopyFrom(const SetQulon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetQulon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQulon::IsInitialized() const {
  return true;
}

void SetQulon::Swap(SetQulon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetQulon::InternalSwap(SetQulon* other) {
  using std::swap;
  swap(qulon_, other->qulon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetQulon::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetLightVelocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLightVelocity::kLightVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLightVelocity::SetLightVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_SetLightVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetLightVelocity)
}
SetLightVelocity::SetLightVelocity(const SetLightVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lightvelocity_ = from.lightvelocity_;
  // @@protoc_insertion_point(copy_constructor:SetLightVelocity)
}

void SetLightVelocity::SharedCtor() {
  lightvelocity_ = 0;
}

SetLightVelocity::~SetLightVelocity() {
  // @@protoc_insertion_point(destructor:SetLightVelocity)
  SharedDtor();
}

void SetLightVelocity::SharedDtor() {
}

void SetLightVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetLightVelocity::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLightVelocity& SetLightVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_SetLightVelocity.base);
  return *internal_default_instance();
}


void SetLightVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:SetLightVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lightvelocity_ = 0;
  _internal_metadata_.Clear();
}

bool SetLightVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetLightVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lightVelocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetLightVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetLightVelocity)
  return false;
#undef DO_
}

void SetLightVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetLightVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lightVelocity = 1;
  if (this->lightvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lightvelocity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SetLightVelocity)
}

::google::protobuf::uint8* SetLightVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetLightVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lightVelocity = 1;
  if (this->lightvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lightvelocity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetLightVelocity)
  return target;
}

size_t SetLightVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetLightVelocity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float lightVelocity = 1;
  if (this->lightvelocity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLightVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetLightVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLightVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLightVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetLightVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetLightVelocity)
    MergeFrom(*source);
  }
}

void SetLightVelocity::MergeFrom(const SetLightVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetLightVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lightvelocity() != 0) {
    set_lightvelocity(from.lightvelocity());
  }
}

void SetLightVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetLightVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLightVelocity::CopyFrom(const SetLightVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetLightVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLightVelocity::IsInitialized() const {
  return true;
}

void SetLightVelocity::Swap(SetLightVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLightVelocity::InternalSwap(SetLightVelocity* other) {
  using std::swap;
  swap(lightvelocity_, other->lightvelocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetLightVelocity::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetMagneticCalculated::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMagneticCalculated::kMagneticCalculatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMagneticCalculated::SetMagneticCalculated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_SetMagneticCalculated.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetMagneticCalculated)
}
SetMagneticCalculated::SetMagneticCalculated(const SetMagneticCalculated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magneticcalculated_ = from.magneticcalculated_;
  // @@protoc_insertion_point(copy_constructor:SetMagneticCalculated)
}

void SetMagneticCalculated::SharedCtor() {
  magneticcalculated_ = false;
}

SetMagneticCalculated::~SetMagneticCalculated() {
  // @@protoc_insertion_point(destructor:SetMagneticCalculated)
  SharedDtor();
}

void SetMagneticCalculated::SharedDtor() {
}

void SetMagneticCalculated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetMagneticCalculated::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetMagneticCalculated& SetMagneticCalculated::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_SetMagneticCalculated.base);
  return *internal_default_instance();
}


void SetMagneticCalculated::Clear() {
// @@protoc_insertion_point(message_clear_start:SetMagneticCalculated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magneticcalculated_ = false;
  _internal_metadata_.Clear();
}

bool SetMagneticCalculated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetMagneticCalculated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool magneticCalculated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &magneticcalculated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetMagneticCalculated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetMagneticCalculated)
  return false;
#undef DO_
}

void SetMagneticCalculated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetMagneticCalculated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool magneticCalculated = 1;
  if (this->magneticcalculated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->magneticcalculated(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SetMagneticCalculated)
}

::google::protobuf::uint8* SetMagneticCalculated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetMagneticCalculated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool magneticCalculated = 1;
  if (this->magneticcalculated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->magneticcalculated(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetMagneticCalculated)
  return target;
}

size_t SetMagneticCalculated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetMagneticCalculated)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool magneticCalculated = 1;
  if (this->magneticcalculated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMagneticCalculated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetMagneticCalculated)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMagneticCalculated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMagneticCalculated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetMagneticCalculated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetMagneticCalculated)
    MergeFrom(*source);
  }
}

void SetMagneticCalculated::MergeFrom(const SetMagneticCalculated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetMagneticCalculated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magneticcalculated() != 0) {
    set_magneticcalculated(from.magneticcalculated());
  }
}

void SetMagneticCalculated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetMagneticCalculated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMagneticCalculated::CopyFrom(const SetMagneticCalculated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetMagneticCalculated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMagneticCalculated::IsInitialized() const {
  return true;
}

void SetMagneticCalculated::Swap(SetMagneticCalculated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMagneticCalculated::InternalSwap(SetMagneticCalculated* other) {
  using std::swap;
  swap(magneticcalculated_, other->magneticcalculated_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetMagneticCalculated::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientWrappedMessage::InitAsDefaultInstance() {
  ::_ClientWrappedMessage_default_instance_.key_ = const_cast< ::KeyboardKey*>(
      ::KeyboardKey::internal_default_instance());
  ::_ClientWrappedMessage_default_instance_.ping_ = const_cast< ::Ping*>(
      ::Ping::internal_default_instance());
  ::_ClientWrappedMessage_default_instance_.qulon_ = const_cast< ::SetQulon*>(
      ::SetQulon::internal_default_instance());
  ::_ClientWrappedMessage_default_instance_.lightvelocity_ = const_cast< ::SetLightVelocity*>(
      ::SetLightVelocity::internal_default_instance());
  ::_ClientWrappedMessage_default_instance_.magneticcalculated_ = const_cast< ::SetMagneticCalculated*>(
      ::SetMagneticCalculated::internal_default_instance());
}
void ClientWrappedMessage::set_allocated_key(::KeyboardKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    message_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientWrappedMessage.key)
}
void ClientWrappedMessage::set_allocated_ping(::Ping* ping) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    message_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientWrappedMessage.ping)
}
void ClientWrappedMessage::set_allocated_qulon(::SetQulon* qulon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (qulon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qulon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qulon, submessage_arena);
    }
    set_has_qulon();
    message_.qulon_ = qulon;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientWrappedMessage.qulon)
}
void ClientWrappedMessage::set_allocated_lightvelocity(::SetLightVelocity* lightvelocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (lightvelocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lightvelocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lightvelocity, submessage_arena);
    }
    set_has_lightvelocity();
    message_.lightvelocity_ = lightvelocity;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientWrappedMessage.lightVelocity)
}
void ClientWrappedMessage::set_allocated_magneticcalculated(::SetMagneticCalculated* magneticcalculated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (magneticcalculated) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      magneticcalculated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, magneticcalculated, submessage_arena);
    }
    set_has_magneticcalculated();
    message_.magneticcalculated_ = magneticcalculated;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientWrappedMessage.magneticCalculated)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientWrappedMessage::kKeyFieldNumber;
const int ClientWrappedMessage::kPingFieldNumber;
const int ClientWrappedMessage::kQulonFieldNumber;
const int ClientWrappedMessage::kLightVelocityFieldNumber;
const int ClientWrappedMessage::kMagneticCalculatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientWrappedMessage::ClientWrappedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_client_5flistener_2eproto::scc_info_ClientWrappedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientWrappedMessage)
}
ClientWrappedMessage::ClientWrappedMessage(const ClientWrappedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kKey: {
      mutable_key()->::KeyboardKey::MergeFrom(from.key());
      break;
    }
    case kPing: {
      mutable_ping()->::Ping::MergeFrom(from.ping());
      break;
    }
    case kQulon: {
      mutable_qulon()->::SetQulon::MergeFrom(from.qulon());
      break;
    }
    case kLightVelocity: {
      mutable_lightvelocity()->::SetLightVelocity::MergeFrom(from.lightvelocity());
      break;
    }
    case kMagneticCalculated: {
      mutable_magneticcalculated()->::SetMagneticCalculated::MergeFrom(from.magneticcalculated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientWrappedMessage)
}

void ClientWrappedMessage::SharedCtor() {
  clear_has_message();
}

ClientWrappedMessage::~ClientWrappedMessage() {
  // @@protoc_insertion_point(destructor:ClientWrappedMessage)
  SharedDtor();
}

void ClientWrappedMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void ClientWrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientWrappedMessage::descriptor() {
  ::protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientWrappedMessage& ClientWrappedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_client_5flistener_2eproto::scc_info_ClientWrappedMessage.base);
  return *internal_default_instance();
}


void ClientWrappedMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ClientWrappedMessage)
  switch (message_case()) {
    case kKey: {
      delete message_.key_;
      break;
    }
    case kPing: {
      delete message_.ping_;
      break;
    }
    case kQulon: {
      delete message_.qulon_;
      break;
    }
    case kLightVelocity: {
      delete message_.lightvelocity_;
      break;
    }
    case kMagneticCalculated: {
      delete message_.magneticcalculated_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ClientWrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool ClientWrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientWrappedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .KeyboardKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Ping ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SetQulon qulon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qulon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SetLightVelocity lightVelocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lightvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SetMagneticCalculated magneticCalculated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_magneticcalculated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientWrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientWrappedMessage)
  return false;
#undef DO_
}

void ClientWrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KeyboardKey key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .Ping ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ping(), output);
  }

  // .SetQulon qulon = 3;
  if (has_qulon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_qulon(), output);
  }

  // .SetLightVelocity lightVelocity = 4;
  if (has_lightvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lightvelocity(), output);
  }

  // .SetMagneticCalculated magneticCalculated = 5;
  if (has_magneticcalculated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_magneticcalculated(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientWrappedMessage)
}

::google::protobuf::uint8* ClientWrappedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KeyboardKey key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .Ping ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ping(), deterministic, target);
  }

  // .SetQulon qulon = 3;
  if (has_qulon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_qulon(), deterministic, target);
  }

  // .SetLightVelocity lightVelocity = 4;
  if (has_lightvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lightvelocity(), deterministic, target);
  }

  // .SetMagneticCalculated magneticCalculated = 5;
  if (has_magneticcalculated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_magneticcalculated(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientWrappedMessage)
  return target;
}

size_t ClientWrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientWrappedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .KeyboardKey key = 1;
    case kKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.key_);
      break;
    }
    // .Ping ping = 2;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.ping_);
      break;
    }
    // .SetQulon qulon = 3;
    case kQulon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.qulon_);
      break;
    }
    // .SetLightVelocity lightVelocity = 4;
    case kLightVelocity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.lightvelocity_);
      break;
    }
    // .SetMagneticCalculated magneticCalculated = 5;
    case kMagneticCalculated: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.magneticcalculated_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientWrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientWrappedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientWrappedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientWrappedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientWrappedMessage)
    MergeFrom(*source);
  }
}

void ClientWrappedMessage::MergeFrom(const ClientWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kKey: {
      mutable_key()->::KeyboardKey::MergeFrom(from.key());
      break;
    }
    case kPing: {
      mutable_ping()->::Ping::MergeFrom(from.ping());
      break;
    }
    case kQulon: {
      mutable_qulon()->::SetQulon::MergeFrom(from.qulon());
      break;
    }
    case kLightVelocity: {
      mutable_lightvelocity()->::SetLightVelocity::MergeFrom(from.lightvelocity());
      break;
    }
    case kMagneticCalculated: {
      mutable_magneticcalculated()->::SetMagneticCalculated::MergeFrom(from.magneticcalculated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ClientWrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientWrappedMessage::CopyFrom(const ClientWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientWrappedMessage::IsInitialized() const {
  return true;
}

void ClientWrappedMessage::Swap(ClientWrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientWrappedMessage::InternalSwap(ClientWrappedMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientWrappedMessage::GetMetadata() const {
  protobuf_client_5flistener_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_client_5flistener_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RoomInfo* Arena::CreateMaybeMessage< ::RoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RoomInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ResponceOnGameInvitation* Arena::CreateMaybeMessage< ::ResponceOnGameInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::ResponceOnGameInvitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ResponceOnGameView* Arena::CreateMaybeMessage< ::ResponceOnGameView >(Arena* arena) {
  return Arena::CreateInternal< ::ResponceOnGameView >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::StartGame* Arena::CreateMaybeMessage< ::StartGame >(Arena* arena) {
  return Arena::CreateInternal< ::StartGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OneChargeInfo* Arena::CreateMaybeMessage< ::OneChargeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OneChargeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ShowStruct* Arena::CreateMaybeMessage< ::ShowStruct >(Arena* arena) {
  return Arena::CreateInternal< ::ShowStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SceneGeometry* Arena::CreateMaybeMessage< ::SceneGeometry >(Arena* arena) {
  return Arena::CreateInternal< ::SceneGeometry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RTCGameClientRequest* Arena::CreateMaybeMessage< ::RTCGameClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RTCGameClientRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RTCGameAdminRequest* Arena::CreateMaybeMessage< ::RTCGameAdminRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RTCGameAdminRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlayGameRequest* Arena::CreateMaybeMessage< ::PlayGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PlayGameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ViewGameRequest* Arena::CreateMaybeMessage< ::ViewGameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ViewGameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RTCAdmin2ClientOffer* Arena::CreateMaybeMessage< ::RTCAdmin2ClientOffer >(Arena* arena) {
  return Arena::CreateInternal< ::RTCAdmin2ClientOffer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RTCClient2AdminAnswer* Arena::CreateMaybeMessage< ::RTCClient2AdminAnswer >(Arena* arena) {
  return Arena::CreateInternal< ::RTCClient2AdminAnswer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ClientQueryRequest* Arena::CreateMaybeMessage< ::ClientQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ClientQueryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RoomToClient* Arena::CreateMaybeMessage< ::RoomToClient >(Arena* arena) {
  return Arena::CreateInternal< ::RoomToClient >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameState* Arena::CreateMaybeMessage< ::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::GameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameInfo* Arena::CreateMaybeMessage< ::GameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RoomWrappedToClientMessage* Arena::CreateMaybeMessage< ::RoomWrappedToClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RoomWrappedToClientMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WebRTCGameInfo* Arena::CreateMaybeMessage< ::WebRTCGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::WebRTCGameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WebRTCAdminToClientMessage* Arena::CreateMaybeMessage< ::WebRTCAdminToClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::WebRTCAdminToClientMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RoomWrappedMessage* Arena::CreateMaybeMessage< ::RoomWrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RoomWrappedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InvitationToPlayGame* Arena::CreateMaybeMessage< ::InvitationToPlayGame >(Arena* arena) {
  return Arena::CreateInternal< ::InvitationToPlayGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InvitationToViewGame* Arena::CreateMaybeMessage< ::InvitationToViewGame >(Arena* arena) {
  return Arena::CreateInternal< ::InvitationToViewGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ListenerToClientGamesStates* Arena::CreateMaybeMessage< ::ListenerToClientGamesStates >(Arena* arena) {
  return Arena::CreateInternal< ::ListenerToClientGamesStates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rtcGameState* Arena::CreateMaybeMessage< ::rtcGameState >(Arena* arena) {
  return Arena::CreateInternal< ::rtcGameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ListenerToClientsWebRTCGamesStates* Arena::CreateMaybeMessage< ::ListenerToClientsWebRTCGamesStates >(Arena* arena) {
  return Arena::CreateInternal< ::ListenerToClientsWebRTCGamesStates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ListenerToClientsWebRTCRefuse* Arena::CreateMaybeMessage< ::ListenerToClientsWebRTCRefuse >(Arena* arena) {
  return Arena::CreateInternal< ::ListenerToClientsWebRTCRefuse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ListenerToClientWrappedMessage* Arena::CreateMaybeMessage< ::ListenerToClientWrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ListenerToClientWrappedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerWrappedMessage* Arena::CreateMaybeMessage< ::ServerWrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ServerWrappedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KeyboardKey* Arena::CreateMaybeMessage< ::KeyboardKey >(Arena* arena) {
  return Arena::CreateInternal< ::KeyboardKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Ping* Arena::CreateMaybeMessage< ::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::Ping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SetQulon* Arena::CreateMaybeMessage< ::SetQulon >(Arena* arena) {
  return Arena::CreateInternal< ::SetQulon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SetLightVelocity* Arena::CreateMaybeMessage< ::SetLightVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::SetLightVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SetMagneticCalculated* Arena::CreateMaybeMessage< ::SetMagneticCalculated >(Arena* arena) {
  return Arena::CreateInternal< ::SetMagneticCalculated >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ClientWrappedMessage* Arena::CreateMaybeMessage< ::ClientWrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ClientWrappedMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
